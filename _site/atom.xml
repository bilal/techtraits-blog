<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Tech Traits</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2012-06-14T21:41:26-04:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name>Bilal Sheikh</name>
   <email>bilal@techtraits.com</email>
 </author>

 
 <entry>
   <title>Jackson Optimization, Using Non-Default for fun and profit</title>
   <link href="http://username.github.com/2012/03/10/jackson-optimization-using-non-default-for-fun-and-profit"/>
   <updated>2012-03-10T11:12:25-05:00</updated>
   <id>http://username.github.com/2012/03/10/jackson-optimization-using-non-default-for-fun-and-profit</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We use Jackson JSON processor extensively for serializing/deserializing  objects to for storage in backing storage service as well as to send responses between client and server. One thing we noted was that despite our best efforts a lot of objects had fields that we were either null or set to default values. For example our We store all the virtual goods owned by a user. For a lot of new users this list is empty as the have not bought anything yet. However we still incur the overhead of sending and storing an empty list. This translates to both a performance cost and dollar cost as we use Amazon Ec2 which charges us for bandwith and and DynamoDB which charges us for read/write capacity used. Luckily we can use a nice little feature of jackson called Non-Default get around this issue. 

&amp;lt;!--more--&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The first step is to tell jackson to only include non null objects in serialization output. This will take care of most java objects which are uninitialized. 

&amp;lt;pre lang=&amp;quot;Java&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
ObjectMapper mapper = new ObjectMapper();
mapper.getSerializationConfig().
	setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);

&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
A lot of times you do not want to leave so many null objects floating around in your code. For example its a good idea to initialize all lists to empty lists rather than letting them be nulls. In this scenario we set the Non-Default inclusion of the serialization config and then initialize objects to a default value. Not we must initialize the parameters in static context rather then the constructor. 

&amp;lt;pre lang=&amp;quot;Java&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
ObjectMapper mapper = new ObjectMapper();
mapper.getSerializationConfig().
	setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);

mapper.getSerializationConfig().
	setSerializationInclusion(JsonSerialize.Inclusion.NON_DEFAULT);

&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Quick Example&amp;lt;/h3&amp;gt;

&amp;lt;pre lang=&amp;quot;Java&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
public class SerializeMe {

	@JsonProeprty
	private int anInteger = 10;

	@JsonProeprty
	private List&amp;lt;String&amp;gt; lotsOfStrings = new ArrayList&amp;lt;String&amp;gt;();

	//Other Properties
}
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Say you have an object of the class above with the anInteger and lotsOfStrings properties not edited after object creation. When you serialize this object for storage to a database without the two optimizations shown above the object will serialize too: 

&amp;lt;pre lang=&amp;quot;json&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
{
    &amp;quot;anInteger&amp;quot;: 10,
    &amp;quot;lotsOfStrings&amp;quot;: [],
    ...Other properties	
}
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Where as with the optimizations it will be much shorted saving you appriximately 40 bytes for each object instance. This may seem small but with millions of objects and objects with more properties this change can be significant.

&amp;lt;pre lang=&amp;quot;json&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
{
    ...Other properties	
}
&amp;lt;/pre&amp;gt;

This example also highlights one of the possible problems of the optimization, say that you use the same mapper for serializing objects which are reported to clients. Unless the client is aware of the default values it will not know what the value of anInteger is. For this reason its almost always better to use a different mapper for internal object serialization and client side serialization. 

&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
&amp;lt;ul&amp;gt;	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/&amp;quot; title=&amp;quot;Jackson&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Jackson JSON Processor&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Really Really Async AWS SDK</title>
   <link href="http://username.github.com/2012/02/14/really-really-async-aws-sdk"/>
   <updated>2012-02-14T19:14:00-05:00</updated>
   <id>http://username.github.com/2012/02/14/really-really-async-aws-sdk</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Like much of the world I use Amazon services and the Aws SDK (Java in our case) to support our scalable web service. In an effort to maximize the number of users we could support per machine we use a asynchronous request processing architecture using &amp;lt;a href=&amp;quot;http://docs.codehaus.org/display/JETTY/Continuations&amp;quot; title=&amp;quot;Contiuations&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;jetty continuations&amp;lt;/a&amp;gt;. In such a setup we needed an asynchronous AWS SDK. Now you might say the AWS SDK already provides asynchronous an API, and you would be right. However, the asynchronous AWS still return a future and require the calling code to poll the future and look at responses once it is done. We wanted a really really asynchronous API which we could say &amp;quot;Hey do X, and when you are done do Y if there is an error Z but no matter what happens don&amp;apos;t bother me again&amp;quot;. Since there was no such API we decided to implement it ourselves and you can find it &amp;lt;a href=&amp;quot;https://github.com/techtraits/aws-sdk-for-java&amp;quot; title=&amp;quot;Tech traits Aws SDK for Java&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. 


&amp;lt;!--more--&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The use case I describe above is facetious but its remarkably useful. For example say your server has to save something to &amp;lt;a href=&amp;quot;http://aws.amazon.com/dynamodb/&amp;quot; title=&amp;quot;DynamoDB&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;DynamoDB&amp;lt;/a&amp;gt;. You callputItemAsync and get a future object back. The SDK uses an internal thread pool to get a thread and uses that thread to send a blocking http call to Amazon. Once that is done the internal thread sets the done field of the future to true. In the meantime you own code is periodically checking (or waiting) for the future to complete.

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
Future&amp;lt;PutItemResult&amp;gt; future = awssdk.putItemAsync(putItemRequest)
while(future.isDone() == false) {
        //Twiddle my thumbs.
}
PutItemResult result = future.get();
//No errors, cool lets ignore the result
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
You should begin to see the problem here. There are two threads blocked doing nothing (or one blocked and one polling) while they could be doing meaningful work. Furthermore for a lot of times we don&amp;apos;t even really care about the response from Amazon other than to log an error if needed. There is no reason why the rest of the request should wait for a put item to complete its not like we are retrieving information we need later. To get around this issue we added the &amp;lt;a href=&amp;quot;https://github.com/techtraits/aws-sdk-for-java/blob/master/src/main/java/com/amazonaws/AsyncServiceHandler.java&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;AsyncServiceHandler.java&amp;lt;/a&amp;gt;. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt; 
awssdk.putItemAsync(putItemRequest,new AsyncServiceHandler&amp;lt;PutItemResult, 
                PutItemRequest&amp;gt;() {

        @Override
        public void handleResult(PutItemResult arg0, PutItemRequest arg1) {
                //Do something here if you must  
        }

        @Override
        public void handleException(Exception arg0) {
                //Log an exception and retry if you want    
        }

        @Override
        public void handleException(AmazonClientException arg0) {
                //Log an exception and retry if you want
        }

        @Override
        public void handleException(AmazonServiceException arg0) {
                //Log an exception and retry if you want
        }
    });
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;
In this implementation you get the same great feature but with 0% thumb twiddling. The internal thread still blocks when making the request to Amazon but once its done it just calls the result or error handlers as needed. Your main thread never check request status. &lt;/p&gt;&lt;p style='text-align: justify;'&gt;
As a side bar you may ask why did we implement three error case handlers, and if you look at it closely they are all in the same inheritance tree. AmazonServiceException is a child of AmazonClientException which a child of  Exception. The AmazonServiceException has a much cleaner interface to find out what went wrong if the error was server side, AmazonClientException will catch server side as well as client side errors but its much more difficult finding out what happened in case of server side errors. And we define a handler for the plain old exception class to catch any other errors that may happen. We could have used if (arg0 instanceOf AmazonServiceException) to check the error type but that is just gross.  
&lt;/p&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Do I hear anyone ask &amp;quot;How do I get this awesome new API?&amp;quot; well we have finished the implementation for DynamoDB and will integrate with the rest of the services very soon. We have already submitted a patch to Amazon hopefully this code or something similar will be in the master branch soon. Until then you can build and deploy the code as follows:

&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
git clone git@github.com:techtraits/aws-sdk-for-java.git
cd aws-sdk-for-java
#Some hacking see below
mvn clean install
#Copy to your nexus repo
&amp;lt;/pre&amp;gt;

The hacking required is to edit the pom.xml file as follows:

&amp;lt;ul&amp;gt;
 	&amp;lt;li&amp;gt;
 	Change the version from &amp;amp;lt;version&amp;amp;gt;1.3.2&amp;amp;lt;/version&amp;amp;gt; to something like &amp;amp;lt;version&amp;amp;gt;1.3.2_hacked&amp;amp;lt;/version&amp;amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt; You should also delete the gpg signing plugin unless you really really want signed code
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
      &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
          &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;maven-gpg-plugin&amp;lt;/artifactId&amp;gt;
          &amp;lt;version&amp;gt;1.4&amp;lt;/version&amp;gt;
          &amp;lt;executions&amp;gt;
            &amp;lt;execution&amp;gt;
              &amp;lt;id&amp;gt;sign-artifacts&amp;lt;/id&amp;gt;
              &amp;lt;phase&amp;gt;verify&amp;lt;/phase&amp;gt;
              &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;sign&amp;lt;/goal&amp;gt;
              &amp;lt;/goals&amp;gt;
            &amp;lt;/execution&amp;gt;
          &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
      &amp;lt;/plugins&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;And you are all set just deploy the compiled jar to your maven repo&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;In true cooking show fashion &amp;lt;a href=&amp;apos;http://www.techtraits.com/wp-content/uploads/2012/02/aws-java-sdk-1.3.2_edited.jar&amp;apos;&amp;gt;here&amp;lt;/a&amp;gt; is one I built earlier&amp;lt;/li&amp;gt;


 	&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Erlang: List Manipulation using comprehensions</title>
   <link href="http://username.github.com/2012/02/11/erlang-list-manipulation-using-comprehensions"/>
   <updated>2012-02-11T18:06:06-05:00</updated>
   <id>http://username.github.com/2012/02/11/erlang-list-manipulation-using-comprehensions</id>
   <content type="html">&lt;p&gt;I have recently started working in Erlang and there are many things to like about the language, the data isolation, the functional paradigm and the raw speed. However, one thing that no one loves about erlang is its syntax. Even after a weeks of working on the language you will still be searching through the manual to decipher what the hell does this symbol do. Since its a symbol its really hard to google the right answer unless you already know what you are looking for. &lt;!--more--&gt; &lt;h3&gt;List comprehensions&lt;/h3&gt; &lt;p style='text-align: justify;'&gt;List comprehensions are a concise way to create and modify lists in erlang using the mathematical concept of sets. Sets is math are often described using their properties and constrains in relation to other sets. For example you might describe a set as &quot;All values of x squared such that x is in set L&quot;. Or more concisely {x*x : x in L}. The erlang code for this will be&lt;/p&gt; &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;erlang&amp;quot;&amp;gt;
L = [1,2,3,4,5]. %% define L
[X*X || X &amp;lt;- L].
&amp;lt;/pre&amp;gt;&lt;/pre&gt; &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We can even put constraints on the values of the original set that will be used in the new set construction. For example lets say our definition now is &amp;quot;All values of x squared such that x is an even number in the set L&amp;quot;. The erlang code for this is:
&amp;lt;pre lang=&amp;quot;erlang&amp;quot;&amp;gt;
L = [1,2,3,4,5]. %% define L
[X*X || X &amp;lt;- L, X rem 2 =:= 0].
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Lastly we can even use multiple sets as inputs to a list comprehension call. For example a list defines as &amp;quot;All values of x multiplied by y such that x is an even number in the set L and y is an odd number is set S&amp;quot;. The code for this will be as follows:
&amp;lt;pre lang=&amp;quot;erlang&amp;quot;&amp;gt;
L = [1,2,3,4,5]. %% define L
S = [6,7,8,9,10]. %% define S
[X*X || X &amp;lt;- L, Y &amp;lt;- S, X rem 2 =:= 0, Y rem 2 =:= 1].
&amp;lt;/pre&amp;gt;


&amp;lt;h3&amp;gt;External links&amp;lt;/h3&amp;gt;
&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://learnyousomeerlang.com/starting-out-for-real#list-comprehensions&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Learn you some erlang&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://en.wikibooks.org/wiki/Erlang_Programming/List_Comprehensions&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Erlang Programming&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.erlang.org/doc/programming_examples/list_comprehensions.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Erlang Docs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;


&amp;lt;/ul&amp;gt;
&amp;lt;h3&amp;gt;Key words for the weary googler&amp;lt;/h3&amp;gt;
So in the interests of googlers here are some key words that you might search for.
&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;What does &amp;quot;||&amp;quot; do in erlang.&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;What does &amp;quot;[||]&amp;quot; do in erlang.&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;Erlang Double Pipe&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Java Optimizaiton, Why is my application so slow?</title>
   <link href="http://username.github.com/2012/02/03/java-optimizaiton"/>
   <updated>2012-02-03T14:57:36-05:00</updated>
   <id>http://username.github.com/2012/02/03/java-optimizaiton</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
I am currently working on a rest service to support a new game the &amp;lt;a href=&amp;quot;http://www.ea.com/&amp;quot; title=&amp;quot;Electronic Arts&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Electronic Arts&amp;lt;/a&amp;gt; is going to be launching. Our mandate is to support 50K-100K concurrent users at launch. After several months of work we had all the features finished and fairly stable but now the time came to measure and optimize performance. I like to think that I am a half decent Java programmer and server engineer so I can read some code and figure out what the performance bottle necks are. However, with any large project the code is too large for manual optimization especially if there is no structural problems for easy wins. How do you find those small bugs that are so easy to miss but make all the difference. There are many articles telling you what structures and architectures work best but very few that tell you what to do if your architecture is fine but the system is still to slow. This article covers how to go about finding what is actually wrong with your server.
&amp;lt;!--more--&amp;gt;

&amp;lt;h3&amp;gt;Keep Score&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The first thing you need to do is identify the Metric you will use to quantify that there is a problem and how much difference each change makes. Profiles and other tools will give you executions times and percentages of specific parts of the code but you need to have an external metric which captures the bigger picture. A good value for servers is client response time or the number of concurrent users (given an expected user session). For a desktop app it can be the running time of a specific operation or set of operations. 

&amp;lt;h3&amp;gt;&amp;lt;a href=&amp;quot;http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstack.html&amp;quot; title=&amp;quot;JStack&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Dump some threads with JStack&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
A first cut solution is to look at your threads and what they are doing and you can easily do that using the JStack utility. Using this you can take a thread dump of any running java process on your system. Just run get the process id of your application using the ps command and run jstack on that process id. 

&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;
$ps -aux | grep java
usman          12438   0.0  0.2  2890624  15356   ??  S     2:36pm   0:00.18 java ........
$jstack 12438
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
This will list all active threads and also give stack traces of any thread that is in the waiting state. Most modern computers should not be CPU bound so if your app is slow, the CPU(s) and there for threads are usually waiting for something. JStack quickly tells you how many threads are active and what they are waiting for. If there are a lot of waiting threads and the wait is unavoidable then consider using asynchronous code such as &amp;lt;a href=&amp;quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/util/concurrent/ExecutorService.html&amp;quot; title=&amp;quot;Executor Service&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Executor Service&amp;lt;/a&amp;gt; or &amp;lt;a href=&amp;quot;http://docs.codehaus.org/display/JETTY/Continuations&amp;quot; title=&amp;quot;Continuations&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Continuations&amp;lt;/a&amp;gt;.

&amp;lt;h3&amp;gt;&amp;lt;a href=&amp;quot;http://java.sun.com/developer/technicalArticles/Programming/HPROF.html&amp;quot; title=&amp;quot;HPROF&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Look at CPU time with HPROF&amp;lt;/a&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Lets go little deeper into the app using the build in HPROF tool that ships with the Sun/Oracle JVM. With Hprof we can define several profiling metrics that but first lets look at CPU times. Run your application with hprof enabled and configured to capture times:
&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;   
export JAVA_OPTIONS=&amp;quot;-agentlib:hprof=cpu=times,thread=y,file=hprof.txt&amp;quot;
java $JAVA_OPTIONS YourApp.java
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Once your program runs (and exits) the hprof.txt file will contain a table CPU time details like the one shown below. This shows the methods where the CPU spends most of its execution time. The self coloumn marks the percentage of time used by the method and the accum column describes the total time accounted for so far starting at the top. So reading here thread.start accounts for 0.98% of the time and all methods up to here account for 23.96% of execution time. The trace coloumn allows you to look at the stack trace for that particular type of call. This table is important because it tells you which methods to optimize first and what kind of gains to expect. My trace is fairly innocuous because its from a jetty server coming up but its not uncommon for poorly performing applications to spend 90% of their time in just a handful of methods. One application I was working on with badly configured loggers was spending 90% in just logging, fixing that doubled our concurrent user cap.

&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
CPU TIME (ms) BEGIN (total = 11669) Wed Feb  1 19:20:55 2012
rank   self  accum   count trace method
   1  3.50%  3.50%   37272 312412 java.io.BufferedInputStream.read
   2  2.73%  6.23%   37272 312411 java.io.BufferedInputStream.getBufIfOpen
   3  2.44%  8.67%   18636 312413 java.io.DataInputStream.readChar
   4  2.37% 11.05%   34464 312434 java.io.ByteArrayInputStream.read
   5  2.10% 13.15%   10784 312450 java.io.DataInputStream.readChar
   6  1.59% 14.74%    1926 312683 java.lang.String.&amp;lt;init&amp;gt;
   7  1.49% 16.23%    8616 312435 java.io.DataInputStream.readInt
   8  1.37% 17.60%   14976 312676 sun.text.normalizer.Trie.getCodePointOffset
   9  1.14% 18.74%   14976 312678 sun.text.normalizer.NormalizerImpl.getNorm32
  10  1.13% 19.87%    3204 307315 java.lang.Character.toLowerCase
  11  1.05% 20.93%   14335 312674 sun.text.normalizer.Trie.getRawOffset
  12  1.05% 21.98%    4460 314414 java.lang.Character.isJavaIdentifierPart
  13  1.00% 22.98%   14335 312675 sun.text.normalizer.Trie.getBMPOffset
  14  0.98% 23.96%       1 317395 java.lang.Thread.start
  15  0.93% 24.90%     360 313439 java.lang.StringCoding$StringDecoder.decode
  16  0.93% 25.82%     208 300638 sun.misc.ASCIICaseInsensitiveComparator.lowerCaseHashCode
  17  0.88% 26.70%     500 312717 java.text.RBTableBuilder.addExpansion
  18  0.87% 27.58%    2410 300626 java.util.jar.Attributes$Name.isValid
  19  0.87% 28.45%    4987 305903 java.lang.String.charAt
  20  0.85% 29.30%    4986 305947 java.lang.String.charAt
  21  0.84% 30.14%     100 307335 java.util.HashMap.get
  22  0.84% 30.98%    1926 312679 sun.text.normalizer.NormalizerImpl.getExtraDataIndex
  23  0.84% 31.82%    1020 312703 java.lang.Character.codePointAtImpl
  24  0.83% 32.65%     324 312521 java.util.ArrayList.add
  25  0.82% 33.47%      72 315434 java.lang.Character.digit
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;h3&gt;Count the calls&lt;/h3&gt;&lt;pre lang='bash' line='1'&gt;   
export JAVA_OPTIONS=&quot;-agentlib:hprof=cpu=samples,thread=y,file=hprof.txt&quot;
java $JAVA_OPTIONS YourApp.java
&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In addition to giving CPU execution times HPROF can also give us counts for how many times a method is executed. In the example you can see that the first 10 methods account for almost 80% of all method calls. So if you would like to reduce calls those ones will be the targets. If the same method shows up on the times and samples table than you have a definite problem as a slow method call is being called very often. 

&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;  
rank   self  accum   count trace method
   1 19.21% 19.21%     726 300488 java.net.PlainSocketImpl.socketAccept
   2 19.21% 38.41%     726 300514 java.net.PlainSocketImpl.socketAccept
   3 19.21% 57.62%     726 300515 java.net.PlainSocketImpl.socketAccept
   4  9.74% 67.35%     368 301114 sun.nio.ch.EPollArrayWrapper.epollWait
   5  5.85% 73.20%     221 301335 java.net.SocketInputStream.socketRead0
   6  5.74% 78.94%     217 301354 java.net.SocketInputStream.socketRead0
   7  5.24% 84.18%     198 300889 java.util.zip.Inflater.inflateBytes
   8  2.09% 86.27%      79 301396 sun.nio.ch.EPollArrayWrapper.epollWait
   9  1.22% 87.49%      46 300506 java.lang.ClassLoader.defineClass1
  10  0.82% 88.31%      31 301019 sun.net.www.protocol.jar.JarURLConnection.connect
  11  0.77% 89.07%      29 300854 java.lang.ClassLoader.findBootstrapClass0
  12  0.71% 89.79%      27 300890 java.io.FileOutputStream.writeBytes
  13  0.69% 90.48%      26 300908 java.io.FileInputStream.readBytes
  14  0.58% 91.06%      22 300892 java.util.zip.CRC32.updateBytes
  15  0.29% 91.35%      11 301150 sun.net.www.protocol.jar.JarURLConnection.connect
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Count the Objects&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Memory is an important component for optimization and if you are getting out of memory exceptions then you know that your application is in trouble. However there are also more subtle performance implications of memory management. One thing to always check is whether your singletons are actually singletons. In a recent project we used to Google Guice to inject singleton objects using annotations. However in some cases we were using javax.inject.Singletion instead of com.google.inject.Singleton. This small error meant that our singletons weren&amp;apos;t actually singletons. This has all sorts of implications including the fact that one of our singleton classes which handled calls to external servers had several thousand instances and thus was holding several thousand connections open. 

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Also if your applications memory profile is choppy, i.e. it used very little memory for long periods of times followed by a lot of memory quickly you can get OutOfMemmory Exceptions and long garbage collection delays. Therefore try to minimize the number of objects that need to be created repeatedly (i.e. for each request in case of a server). Any objects that can be singletons should be, any objects can be reused should be. 

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We can also get the object allocation information out of HPROF profiling as shown below. The table should the top objects created, the amount of memory they take up. This list will help you find any singletons, which aren&amp;apos;t. Also the profile gives you the number of live object of any type and the total objects of that type allocated. This gives you two key information points. If the number of objects allocated is equal to the number of live objects then these objects were never released and garbage collected. Is this expected? Also if the number of allocated objects is much higher than your live objects count than your application is churning a lot of memory. Maybe you should reuse more objects. Also time the constructor of those objects if this will give you a good idea of the performance overhead of creating those objects.   

&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;   
export JAVA_OPTIONS=&amp;quot;-agentlib:hprof=heap=sites,file=hprof.txt&amp;quot;
java $JAVA_OPTIONS YourApp.java
&amp;lt;/pre&amp;gt;

&amp;lt;pre lang=&amp;quot;bash&amp;quot; line=&amp;quot;1&amp;quot;&amp;gt;   
          percent          live          alloced  stack class
 rank   self  accum     bytes objs     bytes  objs trace name
    1 44.73% 44.73%   1161280 14516  1161280 14516 302032 java.util.zip.ZipEntry
    2  8.95% 53.67%    232256 14516   232256 14516 302033 com.sun.tools.javac.util.List
    3  5.06% 58.74%    131504    2    131504     2 301029 com.sun.tools.javac.util.Name[]
    4  5.05% 63.79%    131088    1    131088     1 301030 byte[]
    5  5.05% 68.84%    131072    1    131072     1 301710 byte[]
&amp;lt;/pre&amp;gt;


&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
	&amp;lt;ul&amp;gt;&amp;lt;a href=&amp;quot;http://docs.oracle.com/javase/1.5.0/docs/tooldocs/share/jstack.html&amp;quot; title=&amp;quot;JStack&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;JStack&amp;lt;/a&amp;gt;&amp;lt;/ul&amp;gt;
	&amp;lt;ul&amp;gt;&amp;lt;a href=&amp;quot;http://java.sun.com/developer/technicalArticles/Programming/HPROF.html&amp;quot; title=&amp;quot;HPROF&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;HPROF&amp;lt;/a&amp;gt;&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Regular Expressions in Elipse Find</title>
   <link href="http://username.github.com/2012/01/17/regular-expressions-in-elipse-find"/>
   <updated>2012-01-17T12:43:13-05:00</updated>
   <id>http://username.github.com/2012/01/17/regular-expressions-in-elipse-find</id>
   <content type="html">&lt;a href='http://www.techtraits.com/wp-content/uploads/2012/01/Screen-Shot-2012-01-17-at-11.22.40-AM1.png'&gt;&lt;img alt='' class='alignright size-full wp-image-769' height='431' src='http://www.techtraits.com/wp-content/uploads/2012/01/Screen-Shot-2012-01-17-at-11.22.40-AM1.png' title='Screen Shot 2012-01-17 at 11.22.40 AM' width='295' /&gt;&lt;/a&gt;&lt;p style='text-align: justify;'&gt;This one is from the D'oh category, How many times have you realized you made a simple mistake in many many places. Sometimes a simple find and replace would suffice but often the matches are ever so slightly different. For example, in one of my projects we had code that had the following code and replacement (Obfuscated). Unfortunately foo and bar could be lots of different values so search and replace was useless. This is where regex replacement comes to the rescue.&lt;/p&gt;&lt;pre lang='java'&gt;
    //Initial 
    ...
    foo.doSomething(bar, getData(bar));
    ...
    
    //Replacement
    ...
    foo.doSomething(bar, getOtherData(bar), getData(bar));
    ...&lt;/pre&gt;&lt;h3&gt;Finding the matches&lt;/h3&gt;&lt;pre lang='perl'&gt;
[a-z][A-zA-Z]*[.]doSomething\([a-z][A-zA-Z]*, getData\([a-z][A-zA-Z]*\)\)
&lt;/pre&gt;&lt;p style='text-align: justify;'&gt; There are lots of nice tutorials on regular expressions (&lt;a href='http://docs.oracle.com/javase/tutorial/essential/regex/index.html' target='_blank' title='Regular Expressions Tutorial'&gt;such as this one&lt;/a&gt;) so I will not go into them here. However, I will write down the expression that you may use to find the target string above. A quick run through; we are looking for a variable in camel case so a single lower case letter followed by one or more Uppercase or lower case letters and a period. then we match the doSomething literal string and an opening brace. Note that we have had to escape the brace. The we have the same definition of a variable name followed by a comma, the getData literal and another variable name. Lastly we close of the braces. This will match the line &quot;foo.doSomething(bar, getData(bar))&quot; where foo and bar can be any variable name&lt;/p&gt;&lt;h3&gt;Defining the Replacement&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To define the replacement we must capture foo and bar. This can be done by using round braces around any part of the regular expression. So our search string now becomes the string shown below. The difference is subtle, notice the extra round braces at &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;(&amp;lt;/strong&amp;gt;&amp;lt;/font&amp;gt;[a-z][A-zA-Z]*&amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;)&amp;lt;/strong&amp;gt;&amp;lt;/font&amp;gt; and doSomething\(&amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;(&amp;lt;/strong&amp;gt;&amp;lt;/font&amp;gt;[a-z][A-zA-Z]*&amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;)&amp;lt;/strong&amp;gt;&amp;lt;/font&amp;gt;. Anything inside the braces gets captures as a string for placing into the replacements string. The captured strings a re numbered from left to right and can be placed into replacement as &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;&amp;lt;strong&amp;gt;$1, $2&amp;lt;/strong&amp;gt;&amp;lt;/font&amp;gt; and so on. The replace text using these variables is shown below.

&amp;lt;pre lang=&amp;quot;perl&amp;quot;&amp;gt;
//Find:
([a-z][A-zA-Z]*)[.]doSomething\(([a-z][A-zA-Z]*), getData\([a-z][A-zA-Z]*\)\)

//Replace with:
$1.doSomething\($2, getOtherData\($2\),getData\($2\)\)
&amp;lt;/pre&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Capturing Java Stack Strace Using JStack</title>
   <link href="http://username.github.com/2012/01/16/capturing-java-stack-strace-using-jstack"/>
   <updated>2012-01-16T11:16:46-05:00</updated>
   <id>http://username.github.com/2012/01/16/capturing-java-stack-strace-using-jstack</id>
   <content type="html">&lt;p&gt;Recently I needed to profile a large distributed web app that was having performance problems. Although I had success using YourKit, it requires us to capture more specific details but it requires restarting a client with profiling enabled. The profiling adds its own overhead to the application and makes it harder to diagnose performance problems. This is where the JStack tool comes in, given the process id (PID) of any java process we can run jstack to capture a stack traces for all threads. An example of the output of the command is shown below. &lt;!--more--&gt; &lt;pre lang='bash'&gt;
jstack 19012 &gt; thread_dump
cat thread_dump
&lt;/pre&gt;&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
Full thread dump OpenJDK Client VM (19.0-b09 mixed mode, sharing):

&amp;quot;Attach Listener&amp;quot; daemon prio=10 tid=0x0a482400 nid=0x5105 waiting on condition [0x00000000]
   java.lang.Thread.State: RUNNABLE

&amp;quot;qtp22874133-506&amp;quot; prio=10 tid=0x09c85400 nid=0x4fc7 waiting on condition [0xb0e7a000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  &amp;lt;0x6c760f50&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
        at org.eclipse.jetty.util.BlockingArrayQueue.poll(BlockingArrayQueue.java:320)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.idleJobPoll(QueuedThreadPool.java:512)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.access$600(QueuedThreadPool.java:38)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:558)
        at java.lang.Thread.run(Thread.java:636)

&amp;quot;qtp22874133-505&amp;quot; prio=10 tid=0x0a4c9800 nid=0x4fc6 waiting on condition [0xb13db000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  &amp;lt;0x6c760f50&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
        at org.eclipse.jetty.util.BlockingArrayQueue.poll(BlockingArrayQueue.java:320)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.idleJobPoll(QueuedThreadPool.java:512)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.access$600(QueuedThreadPool.java:38)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:558)
        at java.lang.Thread.run(Thread.java:636)

&amp;quot;qtp22874133-504&amp;quot; prio=10 tid=0x0a485800 nid=0x4fc5 waiting on condition [0xb2176000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  &amp;lt;0x6c760f50&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
        at org.eclipse.jetty.util.BlockingArrayQueue.poll(BlockingArrayQueue.java:320)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.idleJobPoll(QueuedThreadPool.java:512)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.access$600(QueuedThreadPool.java:38)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:558)
        at java.lang.Thread.run(Thread.java:636)

&amp;quot;qtp22874133-503&amp;quot; prio=10 tid=0x0a4b3400 nid=0x4fc4 waiting on condition [0xb189a000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  &amp;lt;0x6c760f50&amp;gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2081)
        at org.eclipse.jetty.util.BlockingArrayQueue.poll(BlockingArrayQueue.java:320)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.idleJobPoll(QueuedThreadPool.java:512)
        at org.eclipse.jetty.util.thread.QueuedThreadPool.access$600(QueuedThreadPool.java:38)
        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:558)
        at java.lang.Thread.run(Thread.java:636)
&amp;lt;/pre&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Creating executable jars with Maven</title>
   <link href="http://username.github.com/2011/12/17/creating-executable-jars-with-maven"/>
   <updated>2011-12-17T01:48:03-05:00</updated>
   <id>http://username.github.com/2011/12/17/creating-executable-jars-with-maven</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
One really useful task that one of my junior devs recently asked my help with was to create an executable jar from a maven project. He had mostly figured it out on his own but I still think this is a useful topic to cover. To achieve this we will be using the &amp;lt;a href=&amp;quot;http://maven.apache.org/plugins/maven-assembly-plugin/&amp;quot; title=&amp;quot;Maven assembley plugin&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Maven Assembly plug-in&amp;lt;/a&amp;gt; running in Maven 3.

&amp;lt;!--more--&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
As a starting point I will use code I wrote to go along with an earlier article &amp;lt;a href=&amp;quot;http://www.techtraits.ca/five-minute-guide-to-setting-up-a-java-webserver/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;lt;/a&amp;gt;. The code is available &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld.zip&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. First lets go and create our main class, Please add a Java class file at &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;helloworld/src/main/java/com/flybynight/helloworld&amp;lt;/font&amp;gt; and add the following code to let us know or jar was packed properly. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld;

public class Driver {
	public static void main(String[] args) {
		System.out.println(&amp;quot;Hello&amp;quot;);
	}
}
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Next create a manifest file for your executable jar at &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;src/main/resources/META-INF/MANIFEST.MF&amp;lt;/font&amp;gt; and add set the main class parameter to the Driver class we just wrote by adding the following text &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;Main-Class: com.flybynight.helloworld.Driver&amp;lt;/font&amp;gt;.

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now create a assembly description file for you project, create a file at &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;src/assemble/descriptor.xml&amp;lt;/font&amp;gt; and add the text below. We are defining an assembly execution called exe which will create an executable jar in the target directory. A detailed description of all the parameters in the descriptor file can be found &amp;lt;a href=&amp;quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html&amp;quot; title=&amp;quot;Assembly Usage&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.  
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;assembly&amp;gt;
  &amp;lt;id&amp;gt;exe&amp;lt;/id&amp;gt;
  &amp;lt;formats&amp;gt;
    &amp;lt;format&amp;gt;jar&amp;lt;/format&amp;gt;
  &amp;lt;/formats&amp;gt;
  &amp;lt;includeBaseDirectory&amp;gt;false&amp;lt;/includeBaseDirectory&amp;gt;
  &amp;lt;dependencySets&amp;gt;
    &amp;lt;dependencySet&amp;gt;
      &amp;lt;outputDirectory&amp;gt;&amp;lt;/outputDirectory&amp;gt;
      &amp;lt;outputFileNameMapping&amp;gt;&amp;lt;/outputFileNameMapping&amp;gt;
      &amp;lt;unpack&amp;gt;true&amp;lt;/unpack&amp;gt;
      &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
      &amp;lt;includes&amp;gt;
      &amp;lt;/includes&amp;gt;
    &amp;lt;/dependencySet&amp;gt;
  &amp;lt;/dependencySets&amp;gt;
  &amp;lt;fileSets&amp;gt;
    &amp;lt;fileSet&amp;gt;
      &amp;lt;directory&amp;gt;target/classes&amp;lt;/directory&amp;gt;
      &amp;lt;outputDirectory&amp;gt;&amp;lt;/outputDirectory&amp;gt;
    &amp;lt;/fileSet&amp;gt;
  &amp;lt;/fileSets&amp;gt;
&amp;lt;/assembly&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We are almost done now the last step is to add the maven assembly plug-in definition to our pom.xml file. Find the plugins tag in the xml and add the following lines here. Notice how we are referencing the manifest and descriptor file here. 

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;plugin&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.2&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;descriptors&amp;gt;
            &amp;lt;descriptor&amp;gt;src/assemble/descriptor.xml&amp;lt;/descriptor&amp;gt;
        &amp;lt;/descriptors&amp;gt;
        &amp;lt;archive&amp;gt;
            &amp;lt;manifestFile&amp;gt;src/main/resources/META-INF/MANIFEST.MF&amp;lt;/manifestFile&amp;gt;
        &amp;lt;/archive&amp;gt;
    &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/pre&amp;gt;


&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now to test your code run the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;mvn assembly:assembly&amp;lt;/font&amp;gt; target to generate the execute the assembly plugin. You should now see the target/helloworld-exe.jar file. To test the jar run &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;java -jar target/helloworld-exe.jar&amp;lt;/font&amp;gt;. You should see &amp;quot;hello&amp;quot; printed to console.

&amp;lt;h3&amp;gt;Source code&amp;lt;/h3&amp;gt;
The source code for this project is released under the &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/Licensing.txt&amp;apos;&amp;gt;BSD License&amp;lt;/a&amp;gt; and can be downloaded at &amp;lt;a href=&amp;apos;http://www.techtraits.com/wp-content/uploads/2011/12/helloworld.zip&amp;apos;&amp;gt;helloworld&amp;lt;/a&amp;gt;.

mvn assembly:assembly&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Custom PMD Rule for Private Injected fields</title>
   <link href="http://username.github.com/2011/12/04/custum-pmd-rule-for-private-injected-fields"/>
   <updated>2011-12-04T18:51:05-05:00</updated>
   <id>http://username.github.com/2011/12/04/custum-pmd-rule-for-private-injected-fields</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In my current project I am making extensive use of dependency injection using &amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/&amp;quot; title=&amp;quot;Guice&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Guice&amp;lt;/a&amp;gt;. More specifically I am using member injection to inject objects into the member variables of a class. In java member variables should usually be private, but this is even more important when using injection as the whole purpose of injecting members is to remove explicit dependencies and make code more modular. However, try as I might I cannot remember to change all my protected injected variables to private. Therefore I ended up just creating a PMD rule to the same effect. 
&amp;lt;!--more--&amp;gt;

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
	&amp;lt;rule name=&amp;quot;PrivateInjections&amp;quot; message=&amp;quot;Please make injected fields private&amp;quot;
		class=&amp;quot;net.sourceforge.pmd.rules.XPathRule&amp;quot;&amp;gt;
		&amp;lt;description&amp;gt;We don&amp;apos;t take kindly to non private injected fields round
			these parts
		&amp;lt;/description&amp;gt;
		&amp;lt;priority&amp;gt;1&amp;lt;/priority&amp;gt;
		&amp;lt;properties&amp;gt;
			&amp;lt;property name=&amp;quot;xpath&amp;quot;&amp;gt;
				&amp;lt;value&amp;gt;
          &amp;lt;![CDATA[//ClassOrInterfaceBodyDeclaration[contains(Annotation//Name/@Image,&amp;apos;Inject&amp;apos;) and contains(FieldDeclaration/@Private,&amp;apos;false&amp;apos;)]]]&amp;gt;
				&amp;lt;/value&amp;gt;
			&amp;lt;/property&amp;gt;
		&amp;lt;/properties&amp;gt;
		&amp;lt;example&amp;gt;
                    &amp;lt;![CDATA[
                       	@Inject
                       	public String myParameter; //is bad

                      	public String myParameter; //is better

                       	@Inject
                       	private String myParameter; //is best



                    ]]&amp;gt;
		&amp;lt;/example&amp;gt;
	&amp;lt;/rule&amp;gt;
&amp;lt;/pre&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Using method interceptors with Guice</title>
   <link href="http://username.github.com/2011/11/27/using-method-interceptors-with-guice"/>
   <updated>2011-11-27T20:20:04-05:00</updated>
   <id>http://username.github.com/2011/11/27/using-method-interceptors-with-guice</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The &amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/&amp;quot; title=&amp;quot;Guice&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Guice&amp;lt;/a&amp;gt; dependency injection library from Google comes with a whole host of added goodies including Method interception. I have been somewhat obsessed with code quality of late and wanted to use method interception to this end. This article talks about using method interceptors to inspect the parameters for a method and implement boiler plate checks such as null parameters without code repetition. As a simple example I will be implementing a check for null arguments. 
&amp;lt;!--more--&amp;gt;
&amp;lt;h3&amp;gt;Source code&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
As a starting point of this implementation I will be using the sample code from an earlier article &amp;lt;strong&amp;gt;&amp;lt;a href=&amp;quot;http://www.techtraits.ca/five-minute-guide-to-setting-up-a-java-webserver/&amp;quot; title=&amp;quot;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;quot;&amp;gt;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;lt;/a&amp;gt;&amp;lt;/strong&amp;gt; which can be downloaded &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld.zip&amp;quot; title=&amp;quot;Source Code&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. The completed project code can be downloaded at &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/methodinterceptor.zip&amp;apos;&amp;gt;MethodInterceptor.zip&amp;lt;/a&amp;gt;.The source code for this project is released under the &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/Licensing.txt&amp;apos;&amp;gt;BSD License&amp;lt;/a&amp;gt;.

&amp;lt;h3&amp;gt;Defining the annotation&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;

In order to mark the methods for which we wish to ensure non-null parameters we will define a custom Annotation &amp;quot;NotNull&amp;quot;. The code for defining an annotation is shown below. We are defining that this is a &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;Runtime&amp;lt;/font&amp;gt; annotation using the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;@Retention&amp;lt;/font&amp;gt; meta annotation. Similarly we use the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;@Target&amp;lt;/font&amp;gt; meta annotation to define that this annotation can only be applied to methods. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target({ ElementType.METHOD })
public @interface NotNull {

}
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Defining the method interceptor&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In order to create our method interceptor we create a class to implement the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;org.aopalliance.intercept.MethodInterceptor&amp;lt;/font&amp;gt; interface and override the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;invoke&amp;lt;/font&amp;gt; method. We get an instance of the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;org.aopalliance.intercept.MethodInvocation&amp;lt;/font&amp;gt; class passed into the invoke method as a parameter. we can then query the getArguments method of the MethodInvocation class to retrieve all of the arguments. As shown in the code below we then traverse the list of arguments and check if they are null. We could implement any number of validation checks on the arguments at this point. If any of the validations fail we would throw an exception with details of the faliure. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld;

import org.aopalliance.intercept.MethodInterceptor;
import org.aopalliance.intercept.MethodInvocation;

public class NotNullInterceptor implements MethodInterceptor {

	@Override
	public Object invoke(MethodInvocation invocation) throws Throwable {
		Object[] args = invocation.getArguments();
		for (int i = 0; i &amp;lt; args.length; i++) {
			if (args[i] == null) {
				String argType = invocation.getMethod().getParameterTypes()[i].getCanonicalName();
				throw new NullPointerException(&amp;quot;Argument &amp;quot; + i + &amp;quot; of Type &amp;quot; + argType + &amp;quot; should never be null.&amp;quot;);

			}
		}
		return invocation.proceed();
	}

}
&amp;lt;/pre&amp;gt;


&amp;lt;h3&amp;gt;Configure interception&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In order for the interceptor to be invoked we must configure guice to link the annotation to the interceptor. We do this in the GuiceCreater class as part of the bind function of the sitebricks module. We use the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;bindInterceptor&amp;lt;/font&amp;gt; call to link all elements (Matchers) annotated with our &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;NotNull&amp;lt;/font&amp;gt; annotation to our interceptor class &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;NotNullInterceptor&amp;lt;/font&amp;gt;. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
bindInterceptor(Matchers.any(), Matchers.annotatedWith(NotNull.class), new NotNullInterceptor());
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Testing the code&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now all that is left is to take our interceptor for a spin. Create a &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;doSomething(String something)&amp;lt;/font&amp;gt; method in the HelloWorld sitebrick (HelloWorld.java). and annotate the method with the NotNull. Also call the method with a null parameter. See code below. 


&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld.sitebricks;

import com.flybynight.helloworld.NotNull;
import com.google.inject.Inject;
import com.google.inject.name.Named;
import com.google.sitebricks.At;
import com.google.sitebricks.http.Get;

@At(&amp;quot;/helloworld&amp;quot;)
public class HelloWorld {
	
	@Inject
	@Named(&amp;quot;message&amp;quot;)
	String messageString;

	public String getMessage() {
		
		doSomething(&amp;quot;Some&amp;quot;); //Should Pass
		doSomething(null); //Will fail
    	return this.messageString;		
	}

	@NotNull
	public void doSomething(String something) {

	}
}

&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now compile the code using mvn clean install and run it using mvn jetty:run (See &amp;lt;a href=&amp;quot;http://www.techtraits.ca/five-minute-guide-to-setting-up-a-java-webserver/&amp;quot; title=&amp;quot;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;quot;&amp;gt;&amp;quot;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;quot;&amp;lt;/a&amp;gt; for details). To run the code browse to http://localhost:8080/helloworld. 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
Problem accessing /helloworld. Reason:

    Exception [NullPointerException - &amp;quot;Argument 0 of Type java.lang.String should never be null.&amp;quot;] thrown by event method [public void com.flybynight.helloworld.sitebricks.HelloWorld.get()]

at com.flybynight.helloworld.NotNullInterceptor.invoke(NotNullInterceptor.java:15)
(See below for entire trace.)
.....
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Conclusions&amp;lt;/h3&amp;gt;
Method interceptors can be useful for a variety of things and a lot of boiler plate code can be written once and hidden away within interceptors. There are other solutions available for the null argument check we can implement a whole host of project specific or domain specific annotations and validation checks. 

&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/&amp;quot; title=&amp;quot;Guice&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Google Guice&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Using Custom Serializers with Jackson</title>
   <link href="http://username.github.com/2011/11/20/using-custom-serializers-with-jackson"/>
   <updated>2011-11-20T20:46:04-05:00</updated>
   <id>http://username.github.com/2011/11/20/using-custom-serializers-with-jackson</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/&amp;quot; title=&amp;quot;Jackson&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Jackson&amp;lt;/a&amp;gt; is a powerful library which can automatically serialize to and from JSON to Java and I have made extensive use of it in my projects. To integration with jackson you annotate the fields within your &amp;lt;a href=&amp;quot;http://en.wikipedia.org/wiki/Plain_Old_Java_Object&amp;quot; title=&amp;quot;Plain_Old_Java_Object&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;POJOs&amp;lt;/a&amp;gt; with the @JsonProperty annotation. Then using a JSON Mapper you can convert the POJOs to JSON and JSON to POJOs. For more details see my earlier article (&amp;lt;a href=&amp;quot;http://www.techtraits.ca/polymorphic-json-serialization-using-jackson/&amp;quot; title=&amp;quot;Polymorphic JSON Serialization using Jackson&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Polymorphic JSON Serialization using Jackson&amp;lt;/a&amp;gt;). However, sometimes the default behavior of the jackson mapper falls short. In one of my projects I needed to serialize a Java class to a specific integer field within that object. This is not possible using the default &amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.9.0/javadoc/index.html&amp;quot; title=&amp;quot;Object Mapper&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;ObjectMapper&amp;lt;/a&amp;gt; or its &amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.7.0/javadoc/org/codehaus/jackson/map/SerializationConfig.Feature.html&amp;quot; title=&amp;quot;Serialization Config&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;serialization config&amp;lt;/a&amp;gt;. This is where custom serializes come in using &amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.2.1/javadoc/index.html?org/codehaus/jackson/map/annotate/JsonSerialize.html&amp;quot; title=&amp;quot;JSONSerializer&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Json Serializer&amp;lt;/a&amp;gt; comes to the rescue. This article describes the use of custom serializers and deseralizers with the Jackson library.   
&amp;lt;!--more--&amp;gt;
&amp;lt;h3&amp;gt;Getting started&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
As a starting point I will use the code in my earlier article &amp;lt;a href=&amp;quot;http://www.techtraits.ca/polymorphic-json-serialization-using-jackson/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Polymorphic JSON Serialization using Jackson&amp;lt;/a&amp;gt; which can be downloaded &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/07/jackson_serialization.zip&amp;quot; title=&amp;quot;Jackson Serialization&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In the source files you downloaded open Child1.java, look for the SerializeMe property. It is annotated with the JSON Property and will there for be serialized to an integer. What if we wanted to write the string representation of the integer rather than a number. i.e. If the  field value was 3 we would write it as &amp;quot;three&amp;quot;. The first step is to annotate the property with the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;@JsonSerialize&amp;lt;/font&amp;gt; and &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;@JsonDeserialize&amp;lt;/font&amp;gt; annotations and provide the custom classes we want to use for serialization and deserialization as shown below.   


&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
	@JsonSerialize(using = CustomSerializer.class)
	@JsonDeserialize(using = CustomDeSerializer.class)
	@JsonProperty
	public int SerializeMe;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Implementing the Custom Serializer&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In order to implement a custom serializer we must extend the JsonSerializer class and define the template type to be the type for our annotated field. In our case the annotated field is on &amp;quot;int&amp;quot; type. Primitive types are automatically boxed into their respective object types, hence we will be using the Integer type. We override the serialize method which will receive the value of the field in the value parameter. Using the input value we can define what output we want to generate and then write it using the generator parameter. The generator class has many functions for writing the various Json types, we will be using the writeString method for our serializer however a complete list of methods is available &amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.4.2/javadoc/org/codehaus/jackson/JsonGenerator.html&amp;quot; title=&amp;quot;JsonGenerator&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. I am writing a a small converter which generates the string value of input integers, see code below. 
&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
public class CustomSerializer extends JsonSerializer&amp;lt;Integer&amp;gt; {

	@Override
	public void serialize(Integer value, JsonGenerator generator, SerializerProvider provider) throws IOException,
			JsonProcessingException {

		if (value == 1) {
			generator.writeString(&amp;quot;one&amp;quot;);
		} else if (value == 2) {
			generator.writeString(&amp;quot;two&amp;quot;);
		} else if (value == 3) {
			generator.writeString(&amp;quot;three&amp;quot;);
		} else {
			generator.writeString(&amp;quot;A big number&amp;quot;);
		}
	}
}
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;h3&gt;Implementing the Custom Deserializer&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;
You can setup custom object deserialization in exactly the same fashion by extending the JsonDeserializer class and overriding the deserialize method. This method has a parser parameter which we can use to retrieve the Json data as shown below.
&lt;/p&gt;&lt;pre lang='java'&gt;
	@Override
	public Integer deserialize(JsonParser parser, DeserializationContext context) throws IOException,
			JsonProcessingException {

		String value = parser.getText();
		if (value.equals(&quot;one&quot;)) {
			return 1;
		} else if (value.equals(&quot;two&quot;)) {
			return 2;
		} else if (value.equals(&quot;three&quot;)) {
			return 3;
		} else {
			return 0;
		}
	}
&lt;/pre&gt;&lt;h3&gt;Testing the code&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Open up the Driver.java file from the downloaded sources and replace the main method with the code shown below. In this code we are creating and initializing an instance of the Child1 class and then writing it using a Jackson Object mapper. When you run this code you should see &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;{&amp;quot;objectType&amp;quot;:&amp;quot;Child1&amp;quot;,&amp;quot;SerializeMe&amp;quot;:&amp;quot;three&amp;quot;}&amp;lt;/font&amp;gt;. If you delete the annotations from the Child one class and rerun the code you should see &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;{&amp;quot;objectType&amp;quot;:&amp;quot;Child1&amp;quot;,&amp;quot;SerializeMe&amp;quot;:3}&amp;lt;/font&amp;gt;. When we deserialize we see that the value is again stored in the object as 3.  This simple and admittedly contrived example shows the power of custom serializers. I have used these in several projects to format responses according to client requirements without impacting server Object designs.       

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
		public static void main(String[] args) {

		try {
			ObjectMapper oMapper = new ObjectMapper();

			Child1 child1 = new Child1();
			child1.SerializeMe = 3;
			child1.dontSerializeMe = 12;
			String outputChild1 = oMapper.writeValueAsString(child1);
			System.out.println(outputChild1);
			ParentClass inputChild1 = oMapper.readValue(outputChild1, ParentClass.class);
			System.out.println(((Child1) inputChild1).SerializeMe);

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
&amp;lt;/pre&amp;gt;




&amp;lt;h3&amp;gt;Source code&amp;lt;/h3&amp;gt;
The source code for this project is released under the &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/Licensing.txt&amp;apos;&amp;gt;BSD License&amp;lt;/a&amp;gt; and can be downloaded &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/custom_serializer.zip&amp;apos;&amp;gt;here&amp;lt;/a&amp;gt;. 

&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;

&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;Jackson&amp;quot; href=&amp;quot;http://jackson.codehaus.org/&amp;quot;&amp;gt;http://jackson.codehaus.org/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.9.0/javadoc/index.html&amp;quot; title=&amp;quot;Object Mapper&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Object Mapper&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.7.0/javadoc/org/codehaus/jackson/map/SerializationConfig.Feature.html&amp;quot; title=&amp;quot;Serialization Config&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Jackson serialization config&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.2.1/javadoc/index.html?org/codehaus/jackson/map/annotate/JsonSerialize.html&amp;quot; title=&amp;quot;JSONSerializer&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Json Serializer&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;Image curtesy of Eric Miraglia &amp;lt;a href=&amp;quot;http://www.flickr.com/photos/equanimity/3762360637/&amp;quot; title=&amp;quot;Eric Miraglia&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;




&amp;lt;/ul&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Custom PMD Rules using XPath</title>
   <link href="http://username.github.com/2011/11/05/custom-pmd-rules-using-xpath"/>
   <updated>2011-11-05T17:33:52-04:00</updated>
   <id>http://username.github.com/2011/11/05/custom-pmd-rules-using-xpath</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;As a follow-up to my earlier tutorial &lt;a href='http://www.techtraits.ca/writing-pretty-code-with-pmd/' target='_blank' title='Writing pretty code with PMD'&gt;Writing pretty code with PMD&lt;/a&gt; I am going to be discussing making custom PMD rules using &lt;a href='http://www.w3schools.com/xpath/' target='_blank' title='XPath'&gt;XPath&lt;/a&gt;. The first thing to note is that we use a &lt;a href='http://en.wikipedia.org/wiki/Declarative_programming' target='_blank' title='Declarative Programming'&gt;declarative programming&lt;/a&gt; paradigm to define our rules. We define or 'declare' what constitutes a PMD violation, but not what should be done about it, PMD takes care of that part.&lt;/p&gt;&lt;!--more--&gt;&lt;h3&gt;Abstract Syntax Tree&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;PMD uses &lt;a href='http://www.eclipse.org/articles/article.php?file=Article-JavaCodeManipulation_AST/index.html' target='_blank' title='Abstract Syntax Tree'&gt;Java Abstract Syntax Tree (AST)&lt;/a&gt; representation of your source code to apply rules. Essentially the AST is representation of a java class with generic descriptors to refer each element in the source code. In code you may have a class called MyClass but in the AST its just a &quot;ClassOrInterfacedeclaration&quot;. Each element which is contained within an other is its descendant in the tree. For example a field is defined inside a class declaration so it is a descendant of the class description. Similarly all items defined within the same element are siblings in the tree. Any information that can be used to differentiate an instance of the generic type (such as the data type of the field) is stored as a property of the element. If the description above sounds reminiscent of XML its because ASTs are basically XML documents. As basic example of AST representation see the following code and its AST representation.&lt;/p&gt;&lt;pre lang='java'&gt;public class MyClass {
	int x;
	float y;
}&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_585&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;317&amp;#8221; caption=&amp;#8221;AST Reprsentation of Class&amp;#8221;&lt;/span&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-05-at-8.01.20-PM.png'&gt;&lt;img alt='' class='size-full wp-image-585' height='300' src='http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-05-at-8.01.20-PM.png' title='AST Reprsentation of Class' width='317' /&gt;&lt;/a&gt;&lt;span&gt;/caption&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;PMD Rule Designer&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Before we start defining our rules we need a sandbox in which to quickly test our code. Luckily for use PMD comes with just such a tool, PMD Rule designer. I have repackaged the tool into a single executable jar file which you can download here (&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/PMDDesigner.jar&amp;quot; title=&amp;quot;PMDRule designer&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;PMDRuleDesigner.jar&amp;lt;/a&amp;gt;). To run the tool just type java -jar java -jar PMDDesigner.jar into the *nix terminal or windows command line. Write your code in the top left section and hit the &amp;quot;Go&amp;quot; button. The bottom right section will list the AST representation of your code. The two sections on the right deal with XPath, which we will be discussing next. 

[caption id=&amp;quot;attachment_583&amp;quot; align=&amp;quot;aligncenter&amp;quot; width=&amp;quot;640&amp;quot; caption=&amp;quot;PMD Rule Dessigner&amp;quot;]&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/pmddesigner.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-05-at-7.54.28-PM-1024x499.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;PMD Rule Designer&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;311&amp;quot; class=&amp;quot;size-large wp-image-583&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]

&amp;lt;h3&amp;gt;XPath Syntax&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
&amp;lt;h4&amp;gt;&amp;quot;/&amp;quot; Has child&amp;lt;/h4&amp;gt; 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The forward slash defines a child query, For example &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;/TypeDeclaration&amp;lt;/font&amp;gt; defines that we want to match a child of the root node which is of type &amp;quot;TypeDeclaration&amp;quot;. We can also use multiple slashes in a query to search for a set of child relation ships. For example the query below will match will both field declarations in the code above. 
&amp;lt;pre lang=&amp;quot;xpath&amp;quot;&amp;gt;
/TypeDeclaration/ClassOrInterfaceDeclaration/ClassOrInterfaceBody/ClassOrInterfaceBodyDeclaration/FieldDeclaration
&amp;lt;/pre&amp;gt; 
Enter the query specified above into the top left box of the PMD Rule Designer and hit go. In the box in the bottom right you should see the line (Line 4 &amp;amp; Line 5) numbers of the two field declarations. 
[caption id=&amp;quot;attachment_596&amp;quot; align=&amp;quot;aligncenter&amp;quot; width=&amp;quot;797&amp;quot; caption=&amp;quot;Has child&amp;quot;]&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/singleslashquery&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-06-at-1.44.09-AM-1024x301.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;Single Slash Query&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;188&amp;quot; class=&amp;quot;aligncenter size-large wp-image-590&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]
&amp;lt;h4&amp;gt;&amp;quot;//&amp;quot; Has Descendant&amp;lt;/h4&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
You don&amp;apos;t always want to define the full path from root for the element you are searching for so instead of using the has child relation ship you can use the double forward slash or has dependent relationship. This will search for any descendant of the current node. There for the query above to search for field definitions could also be written as &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//FieldDeclaration&amp;lt;/font&amp;gt;.
&amp;lt;/p&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The has descendant is not only useful for shortening queries it is also useful for searching for specific cases regardless of where they exist in the source tree. For example, if we take the code below. There is no query using child relationships alone that will match both variable declarations (int x and float y). Where as the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//PrimativeType&amp;lt;/font&amp;gt;  query matches both. 
&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
class MyClass {
	int x;
	void method() {
		float y;
	}
}
&amp;lt;/pre&amp;gt;
&amp;lt;h4&amp;gt;&amp;quot;@&amp;quot; Has Property&amp;lt;/h4&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The @ sign is used to denote has property, and we can use properties to get information about specific instances of elements. For example the &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;Image&amp;lt;/font&amp;gt; property stores the name of the element (I have no idea why its stored in the Image property). So this query &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//VariableDeclaratorId/@Image&amp;lt;/font&amp;gt; will return two values x and y. 
[caption id=&amp;quot;attachment_596&amp;quot; align=&amp;quot;aligncenter&amp;quot; width=&amp;quot;797&amp;quot; caption=&amp;quot;Properties&amp;quot;]&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/properties.png&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-06-at-1.10.36-AM.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;Proprties&amp;quot; width=&amp;quot;797&amp;quot; height=&amp;quot;338&amp;quot; class=&amp;quot;size-full wp-image-596&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]

&amp;lt;h4&amp;gt;&amp;quot;*&amp;quot; Wild Card&amp;lt;/h4&amp;gt; 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Wild cards are useful for matching many similar elements for example if we wanted to find all the fields and method declarations in a class. for fields we would use a query such as &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//ClassOrInterfaceBodyDeclaration/FieldDeclaration&amp;lt;/font&amp;gt; where as for a method declaration it would be something like &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//ClassOrInterfaceBodyDeclaration/MethodDeclaration&amp;lt;/font&amp;gt;. Using a wild card we can define the query as &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//ClassOrInterfaceBodyDeclaration/*&amp;lt;/font&amp;gt;
&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
class MyClass {
	int x;
	void method() {
		float y;
	}
}
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We can also use wild cards to list all properties of an element by combining @ and * e.g. &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//ClassOrInterfaceBodyDeclaration/FieldDeclaration/@*&amp;lt;/font&amp;gt;

&amp;lt;h4&amp;gt;&amp;quot;[]&amp;quot; Predicates&amp;lt;/h4&amp;gt; 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Conditionals are used to filter the set of possible nodes that match certain portions of the XPath string. For example if in the code below we wish to single out the function(s) which return an int we would use the XPath &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;//MethodDeclaration/ResultType[contains(Type/*/@Image, &amp;quot;int&amp;quot;)]&amp;lt;/font&amp;gt;. The first part defines a tree (or sub-tree) to which the conditional applies. In the example we would only apply the condition to the ResultType nodes which are children of a MethodDeclaration node. In the conditional we specify that the node must have a child or type &amp;apos;Type&amp;apos; which in turn has an Image property containing the value &amp;apos;int&amp;apos;. Note how we use the wildcard to avoid having to specify whether the function will return PrimitiveType or ReferenceType. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
class MyClass {
	int func2() {
		return 0;
	}	

	void func2() {

	}
}
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
By changing the query slightly we can even find the name of the function(s) with the int return type. Note we are now conditionally selecting a MethodDeclaration node which matches the given criterion. Once we have the node we look for its MethodDeclarator child and retrieve the method name. &amp;lt;/p&amp;gt;
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
//MethodDeclaration[contains(ResultType/Type/*/@Image, &amp;quot;int&amp;quot;)]/MethodDeclarator/@Image
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We use the contains functions for our query but there are many other function you can use for predicates. An exhaustive list can be found &amp;lt;a href=&amp;quot;http://www.w3schools.com/xpath/xpath_functions.asp#string&amp;quot; title=&amp;quot;String Functions&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;

&amp;lt;h3&amp;gt;My first rule&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Ok enough beating around the bush lets create our first PMD rule. This is one of my pet peeves, I hate unused or overly generic imports such as &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;import java.NET.*;&amp;lt;/font&amp;gt; that all newbies to java seem to use. So how can we stop them? First of all fire up your pmd rule designer and write some imports to see what they look like, I like to write one example of a violation and one example of proper usage so that I can see the differences. If you look at the properties of the two statements you will see that if we use the wild card import the PackageName property matches the ImportedName property. With the query &amp;lt;font color=&amp;quot;green&amp;quot;&amp;gt;/ImportDeclaration[@PackageName=@ImportedName]&amp;lt;/font&amp;gt; we can select all the imports which use the wild card matching and not the specific imports. Try this query in the Rule designer to verify that it only matches the wild card import. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
import java.net.URL;
import java.net.*;
&amp;lt;/pre&amp;gt;

&amp;lt;table border=&amp;quot;0&amp;quot;&amp;gt;
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;
[caption id=&amp;quot;attachment_614&amp;quot; align=&amp;quot;alignleft&amp;quot; width=&amp;quot;300&amp;quot; caption=&amp;quot;import java.net.*&amp;quot;]&amp;lt;a href=&amp;quot;http://www.techtraits.ca/custom-pmd-rules-using-xpath/wildimport&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-13-at-9.22.59-PM.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;Wild Card Import&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;168&amp;quot; class=&amp;quot;size-full wp-image-614&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]
&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;
[caption id=&amp;quot;attachment_615&amp;quot; align=&amp;quot;alignright&amp;quot; width=&amp;quot;300&amp;quot; caption=&amp;quot;import java.net.URL&amp;quot;]&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/specificimport&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/Screen-Shot-2011-11-13-at-9.23.08-PM-300x168.png&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;Specific Import&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;168&amp;quot; class=&amp;quot;size-medium wp-image-615&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;[/caption]
&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Ok now that we have our XPath query lets create a rule set file, and add the custom rule definition. We give the rule a name, an admonishing message to be displayed to violators as well as a longer description. We can set how severe want the rule violation to be considered. As you can see I really hate wild card imports because I set it to highest level. The all important XPath rule goes in the property.value item of the property named xpath. 
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
    &amp;lt;rule name=&amp;quot;DontImportWild&amp;quot; message=&amp;quot;Please no wild card imports&amp;quot; class=&amp;quot;net.sourceforge.pmd.rules.XPathRule&amp;quot;&amp;gt;
    &amp;lt;description&amp;gt;We don&amp;apos;t take kindly to imports such as java.net.* round these parts&amp;lt;/description&amp;gt;
    &amp;lt;priority&amp;gt;1&amp;lt;/priority&amp;gt;
    &amp;lt;properties&amp;gt;
      &amp;lt;property name=&amp;quot;xpath&amp;quot;&amp;gt;
        &amp;lt;value&amp;gt;
          &amp;lt;![CDATA[/ImportDeclaration[@PackageName=@ImportedName]]]&amp;gt;
        &amp;lt;/value&amp;gt;
      &amp;lt;/property&amp;gt;
    &amp;lt;/properties&amp;gt;
    &amp;lt;example&amp;gt;
    &amp;lt;![CDATA[
    	import java.net.*; //is bad
    	import java.net.URL; //is better
    ]]&amp;gt;
    &amp;lt;/example&amp;gt;
  &amp;lt;/rule&amp;gt;
&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
You can append this rule to the pmd ruleset in my earlier tutorial &amp;lt;a href=&amp;quot;http://www.techtraits.ca/writting-pretty-code-with-pmd/&amp;quot; title=&amp;quot;Writing pretty code with PMD&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Writing pretty code with PMD&amp;lt;/a&amp;gt; which can be downloaded &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/11/helloworld.zip&amp;quot; title=&amp;quot;PMD Project&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. When you run the compile you will get the following output: 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:2.5:check (default) on project helloworld: You have 1 PMD violation. For more details see:helloworld/target/pmd.xml -&amp;gt; [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
And if you open said file you will see the following information, telling you that the problem is on line 8 of the GuiceCreator.java file and that we should not use wild card imports. 
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;pmd version=&amp;quot;4.2.5&amp;quot; timestamp=&amp;quot;2011-11-13T21:55:12.677&amp;quot;&amp;gt;
&amp;lt;file name=&amp;quot;helloworld/src/main/java/com/flybynight/helloworld/GuiceCreator.java&amp;quot;&amp;gt;
&amp;lt;violation beginline=&amp;quot;8&amp;quot; endline=&amp;quot;8&amp;quot; begincolumn=&amp;quot;1&amp;quot; endcolumn=&amp;quot;18&amp;quot; rule=&amp;quot;DontImportWild&amp;quot; ruleset=&amp;quot;PMD-Rules&amp;quot; package=&amp;quot;com.flybynight.helloworld&amp;quot; priority=&amp;quot;1&amp;quot;&amp;gt;
Please no wild card imports
&amp;lt;/violation&amp;gt;
&amp;lt;/file&amp;gt;
&amp;lt;/pmd&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Conclusion&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Despite the length of this article note that we were able to create a small xml snippet which will fix a coding malpractice through out all our code. Granted that this was a simple case but using XPath we can create more complex ad intricate rules. Further more if we spend the effort writing the rule(s) once we can ensure code quality without the overhead of code reviews as PMD can be integrated with our build. 

&amp;lt;h3&amp;gt;Source Code&amp;lt;/h3&amp;gt;
&amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/custom_pm.zip&amp;apos;&amp;gt;Here&amp;lt;/a&amp;gt; is the complete project with updated ruleset file and violation. Note that all code and other source provided here are licensed under the BSD License available &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/Licensing.txt&amp;apos;&amp;gt;Here&amp;lt;/a&amp;gt;. 





&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;

&amp;lt;ul&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;PMD&amp;quot; href=&amp;quot;http://pmd.sourceforge.net/&amp;quot;&amp;gt;http://pmd.sourceforge.net/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;XPath&amp;quot; href=&amp;quot;http://www.w3schools.com/xpath/&amp;quot;&amp;gt;http://www.w3schools.com/xpath/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;Jenkins&amp;quot; href=&amp;quot;http://jenkins-ci.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://jenkins-ci.org/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;Sonar&amp;quot; href=&amp;quot;http://www.sonarsource.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://www.sonarsource.org/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;Rule Sets&amp;quot; href=&amp;quot;http://pmd.sourceforge.net/rules/index.htm&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://pmd.sourceforge.net/rules/index.htm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a title=&amp;quot;Abstract Syntax Tree&amp;quot; href=&amp;quot;http://www.eclipse.org/articles/article.php?file=Article-JavaCodeManipulation_AST/index.html&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://www.eclipse.org/articles/article.php?file=Article-JavaCodeManipulation_AST/index.html&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.w3schools.com/xpath/xpath_functions.asp#string&amp;quot; title=&amp;quot;String functions&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://www.w3schools.com/xpath/xpath_functions.asp#string&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.flickr.com/photos/fortinbras/588295779&amp;quot; title=&amp;quot;&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Photo Curtesy of Dan Iggers&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;


&amp;lt;/ul&amp;gt;
&amp;amp;nbsp;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Writing pretty code with PMD</title>
   <link href="http://username.github.com/2011/10/31/writting-pretty-code-with-pmd"/>
   <updated>2011-10-31T20:16:39-04:00</updated>
   <id>http://username.github.com/2011/10/31/writting-pretty-code-with-pmd</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
I recently found myself in the role of lead developer in my team and had to manage the work of several other junior developers. This is has been an interesting and rewarding experience and has taught me a lot about my self as a person and as a developer. I will leave the personal epiphanies for another time but as a developer I found that I have a lot of pet peeves about what code looks like and I want my juniors to cater to them. For example else must be written ...} else {... In addition some random preferences for code layout standards there are some genuine bugs that junior devs (who am I kidding, I am as bad as they are) leave in when writing code which are easily detectable and using a cursory review. That is were &amp;lt;a href=&amp;quot;http://pmd.sourceforge.net/&amp;quot; title=&amp;quot;PMD&amp;quot;&amp;gt;PMD&amp;lt;/a&amp;gt; comes in, with PMD you can force every one to following coding conventions otherwise fail the build. PMD comes with a nifty set of predefined rules and you can also easily add your own using &amp;lt;a href=&amp;quot;http://www.w3schools.com/xpath/&amp;quot; title=&amp;quot;xPath&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;xPath&amp;lt;/a&amp;gt;. 
&amp;lt;!--more--&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Don&amp;apos;t ask me what PMD stands for, I have tried in vain to find that out using extensive googleing. &amp;lt;a href=&amp;quot;http://pmd.sourceforge.net/meaning.html&amp;quot; title=&amp;quot;What does PMD Mean&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Here&amp;lt;/a&amp;gt; is a list of possible answers. What it does is allow you to add a build phase to your project which checks your code against a predefined set of rules and generates a report on violations. Many tools (&amp;lt;a href=&amp;quot;http://jenkins-ci.org/&amp;quot; title=&amp;quot;Jenkins&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Jenkins&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;http://www.sonarsource.org/&amp;quot; title=&amp;quot;Sonar&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Sonar&amp;lt;/a&amp;gt; etc) will integrate directly with PMD and provide UI to browse code easily. I will go into the tools in subsequent articles but for now a quick tutorial on how to integrate PMD with your build. 

As a starting point I will use code I wrote to go along with an earlier article &amp;lt;a href=&amp;quot;http://www.techtraits.ca/five-minute-guide-to-setting-up-a-java-webserver/&amp;quot; title=&amp;quot;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Setting up a webservice using Guice &amp;amp; Sitebricks&amp;lt;/a&amp;gt;. The code is available &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld.zip&amp;quot; title=&amp;quot;Hello World&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. This is Java project build using maven, but PMD integration is available with other build systems and languages. Download and extract the code and compile using &amp;lt;a href=&amp;quot;http://maven.apache.org/ref/3.0/&amp;quot; title=&amp;quot;Maven 3&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Maven&amp;lt;/a&amp;gt; just to ensure everything is hunky dory.  
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
&amp;gt; cd ${WHEREEVER_YOU_EXTRACTED_IT}/helloworld
&amp;gt; mvn clean install
&amp;lt;/pre&amp;gt;

Hopefully you see something like:
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
[INFO] Installing /Users/usman/Downloads/helloworld/pom.xml to /Users/usman/.m2/repository/com/flybynight/helloworld/helloworld/1.0-SNAPSHOT/helloworld-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.372s
[INFO] Finished at: Mon Oct 31 20:34:07 EDT 2011
[INFO] Final Memory: 11M/81M
[INFO] ------------------------------------------------------------------------
&amp;lt;/pre&amp;gt;


&amp;lt;h3&amp;gt;Maven PMD plugin&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To integrate PMD with your maven build open the pom.xml file in the project root and look for the &amp;lt;plugins&amp;gt; tag. We will add the pmd plugin reference here. 

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;maven-pmd-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.5&amp;lt;/version&amp;gt;
	&amp;lt;configuration&amp;gt;
		&amp;lt;targetJdk&amp;gt;1.6&amp;lt;/targetJdk&amp;gt;
		&amp;lt;linkXref&amp;gt;false&amp;lt;/linkXref&amp;gt;
		&amp;lt;failOnViolation&amp;gt;true&amp;lt;/failOnViolation&amp;gt;
		&amp;lt;failurePriority&amp;gt;1&amp;lt;/failurePriority&amp;gt;
		&amp;lt;rulesets&amp;gt;
			&amp;lt;ruleset&amp;gt;${pom.basedir}/pmd-rulesets.xml&amp;lt;/ruleset&amp;gt;
		&amp;lt;/rulesets&amp;gt;
	&amp;lt;/configuration&amp;gt;
	&amp;lt;executions&amp;gt;
		&amp;lt;execution&amp;gt;
			&amp;lt;goals&amp;gt;
				&amp;lt;goal&amp;gt;check&amp;lt;/goal&amp;gt;
			&amp;lt;/goals&amp;gt;
		&amp;lt;/execution&amp;gt;
	&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt; 
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Configuration&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Most of the parameters above are fairly self explanatory except linkXref which specifies whether our PMD report should have links to the cross referenced source code. The failOnViolation and  failurePriority are used to control when we fail the build. All PMD violations have a priority (as we will see later) ranging from 1-5 with 1 being the worst violations and 5 being the least heinous. In our configuration we are specifying that any violation should break the build (Using the &amp;lt;em&amp;gt;failOnViolation&amp;lt;/em&amp;gt; tag) and that all warnings priority 1 (or higher if we had specified a lower number) should be considered violations (Using the &amp;lt;em&amp;gt;failurePriority&amp;lt;/em&amp;gt; tag). All other priorities will result in a warning but will still allow the build to succeed. 

&amp;lt;h3&amp;gt;Rule sets&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In the configuration above we are specifying a rule sets file which contains all the rules which our code will be checked against. You can see a complete set of common rule sets here: &amp;lt;a href=&amp;quot;http://pmd.sourceforge.net/rules/index.html&amp;quot; title=&amp;quot;Rule Sets&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Rule Sets&amp;lt;/a&amp;gt; and the rule set definition I have used here &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/pmd-rulesets.xml_.txt&amp;apos;&amp;gt;pmd-rulesets.xml&amp;lt;/a&amp;gt;. In addition the snippet below shows the format of the rule set file. Each &amp;lt;em&amp;gt;rule&amp;lt;/em&amp;gt; element in the links to one of the predefined rules and assigns a priority to it. 

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;ruleset name=&amp;quot;PMD-Rules&amp;quot;&amp;gt;
	&amp;lt;description&amp;gt;
		Rule sets go here
	&amp;lt;/description&amp;gt;
	&amp;lt;rule ref=&amp;quot;rulesets/basic.xml/BooleanInstantiation&amp;quot;&amp;gt;
		&amp;lt;priority&amp;gt;5&amp;lt;/priority&amp;gt;
	&amp;lt;/rule&amp;gt; 
	&amp;lt;rule ref=&amp;quot;rulesets/basic.xml/CollapsibleIfStatements&amp;quot;&amp;gt;
		&amp;lt;priority&amp;gt;5&amp;lt;/priority&amp;gt;
	&amp;lt;/rule&amp;gt; 
&amp;lt;/ruleset&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;PMD in action&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Download this rule set file (&amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/pmd-rulesets.xml_.txt&amp;apos;&amp;gt;pmd-rulesets.xml&amp;lt;/a&amp;gt;) and add it to your project base directory. (Note you will have to rename and remove the .txt) Now recompile the project using mvn clean install and you should get the following log output. 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.368s
[INFO] Finished at: Mon Oct 31 21:14:53 EDT 2011
[INFO] Final Memory: 15M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-pmd-plugin:2.5:check (default) on project helloworld: You have 1 PMD violation. For more details see:/XXXXXXXXXX/helloworld/target/pmd.xml -&amp;gt; [Help 1]
&amp;lt;/pre&amp;gt;

Open up the pmd.xml file to see the PMD report; Luckily we only have one violation where we forgot to remove an unused import. As you can see the report reports the file and the line number where the violation is found. 

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;pmd version=&amp;quot;4.2.5&amp;quot; timestamp=&amp;quot;2011-10-31T21:14:52.771&amp;quot;&amp;gt;
&amp;lt;file name=&amp;quot;/Users/usman/Downloads/helloworld/src/main/java/com/flybynight/helloworld/GuiceCreator.java&amp;quot;&amp;gt;
&amp;lt;violation beginline=&amp;quot;7&amp;quot; endline=&amp;quot;7&amp;quot; begincolumn=&amp;quot;1&amp;quot; endcolumn=&amp;quot;47&amp;quot; rule=&amp;quot;UnusedImports&amp;quot; ruleset=&amp;quot;Import Statement Rules&amp;quot; package=&amp;quot;com.flybynight.helloworld&amp;quot; externalInfoUrl=&amp;quot;http://pmd.sourceforge.net/rules/imports.html#UnusedImports&amp;quot; priority=&amp;quot;1&amp;quot;&amp;gt;
Avoid unused imports such as &amp;apos;com.google.inject.servlet.ServletModule&amp;apos;
&amp;lt;/violation&amp;gt;
&amp;lt;/file&amp;gt;
&amp;lt;/pmd&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Source Code&amp;lt;/h3&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld.zip&amp;quot; title=&amp;quot;Initial Code&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Initial Code&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/helloworld.zip&amp;apos;&amp;gt;PMD Integrated Project&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;


&amp;lt;h3&amp;gt;External Links&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://pmd.sourceforge.net/&amp;quot; title=&amp;quot;PMD&amp;quot;&amp;gt;http://pmd.sourceforge.net/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.w3schools.com/xpath/&amp;quot; title=&amp;quot;XPath&amp;quot;&amp;gt;http://www.w3schools.com/xpath/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://jenkins-ci.org/&amp;quot; title=&amp;quot;Jenkins&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://jenkins-ci.org/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://www.sonarsource.org/&amp;quot; title=&amp;quot;Sonar&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://www.sonarsource.org/&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
	&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;http://pmd.sourceforge.net/rules/index.htm&amp;quot; title=&amp;quot;Rule Sets&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://pmd.sourceforge.net/rules/index.htm&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Thanks, I needed that</title>
   <link href="http://username.github.com/2011/10/31/thanks-i-needed-that"/>
   <updated>2011-10-31T19:55:26-04:00</updated>
   <id>http://username.github.com/2011/10/31/thanks-i-needed-that</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;
When I started writing this this blog very few people read it and fewer still chose to leave a comment. I was ok with that, the topics are sometimes esoteric and I write small how too articles for software engineers who have better things to do than writing comments on my articles. This all changed  when some botnet or got a hold of this URL and started posting spam comments. Most are badly worded and obviously fake but some spammers go to great length to make their comments seem genuine. Of coarse all spam comments are extremely flattering, even if its fake its nice to read good things about your writing. So to all spammers targeting my site, thanks. And feel free to post spam comments to this post I will event let the good ones through.
&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>iPhone SDK: Integrating with Json using Jsonkit</title>
   <link href="http://username.github.com/2011/10/16/jsonkit"/>
   <updated>2011-10-16T15:47:20-04:00</updated>
   <id>http://username.github.com/2011/10/16/jsonkit</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
I have been using the Jackson library in Java for automatic serialization to and from JSON to native objects. Recently I had to implement something similar in the iPhone SDK. I had to google around as the tool chain is not as developed as it is for Java. The best library I have been able to find is &amp;lt;a href=&amp;quot;https://github.com/johnezang/JSONKit&amp;quot; title=&amp;quot;JSONKit&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;JSONKit&amp;lt;/a&amp;gt;. This is a short tutorial detailing how to get it working.

&amp;lt;!--more--&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
First download the &amp;lt;a href=&amp;quot;https://github.com/johnezang/JSONKit/blob/master/JSONKit.h&amp;quot; title=&amp;quot;JSONKit.h&amp;quot;&amp;gt;JSONKit.h&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;https://github.com/johnezang/JSONKit/blob/master/JSONKit.m&amp;quot; title=&amp;quot;https://github.com/johnezang/JSONKit/blob/master/JSONKit.m&amp;quot;&amp;gt; JSONKit.m&amp;lt;/a&amp;gt; files and add them to your project source. 
&amp;lt;/p&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Then create an xCode project for your code to go in if you don&amp;apos;t already have one. I am going to use my project from the &amp;lt;a href=&amp;quot;http://www.techtraits.ca/iphone-sdk-hello-world/&amp;quot; title=&amp;quot;http://www.techtraits.ca/iphone-sdk-hello-world/&amp;quot;&amp;gt;HelloWorld&amp;lt;/a&amp;gt; tutorial which you can download here. (&amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/HelloWorld.zip&amp;quot; title=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/HelloWorld.zip&amp;quot;&amp;gt;HelloWorld Source&amp;lt;/a&amp;gt;)
&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now import the file into your source files wherever you would like to parse to and from JSON source which in may case that is HelloWorldViewController.m

&amp;lt;pre lang=&amp;quot;objC&amp;quot;&amp;gt;
#import JSONKit.h
&amp;lt;/pre&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;H3&amp;gt; Creating our Json Strings&amp;lt;/h3&amp;gt;&lt;/pre&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;

Before we start writing out awesome parsing code lets make some JSON string that we wish to parse. I use a tool called &amp;lt;a href=&amp;quot;http://jsonlint.com/&amp;quot; title=&amp;quot;http://jsonlint.com/&amp;quot;&amp;gt;JSONLint&amp;lt;/a&amp;gt; to create JSON snippets for testing. Here are some test snippets I came up with.
&amp;lt;li&amp;gt;Single Parameter&amp;lt;/li&amp;gt;
&amp;lt;pre lang=&amp;quot;JSON&amp;quot;&amp;gt;
{
    &amp;quot;person&amp;quot;: &amp;quot;Usman&amp;quot;
}
&amp;lt;/pre&amp;gt;

&amp;lt;li&amp;gt;Nested Parameters&amp;lt;/li&amp;gt;
&amp;lt;pre lang=&amp;quot;JSON&amp;quot;&amp;gt;
{
    &amp;quot;person&amp;quot;: {
        &amp;quot;name&amp;quot;: &amp;quot;Usman&amp;quot;,
        &amp;quot;job&amp;quot;: &amp;quot;Software Engineer&amp;quot;
    }
}
&amp;lt;/pre&amp;gt;

&amp;lt;li&amp;gt;Nested Parameters&amp;lt;/li&amp;gt;
&amp;lt;pre lang=&amp;quot;JSON&amp;quot;&amp;gt;
{
    &amp;quot;directory&amp;quot;: [
        {
            &amp;quot;person&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Usman&amp;quot;,
                &amp;quot;job&amp;quot;: &amp;quot;Software Engineer&amp;quot;
            }
        },
        {
            &amp;quot;person&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;Someone else&amp;quot;,
                &amp;quot;job&amp;quot;: &amp;quot;Some other profession&amp;quot;
            }
        }
    ]
}
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Next we create three methods to return the JSON strings in the form of NSData objects in HelloWorldViewController.m, I have hard coded the strings as shown above with proper escaped characters for line endings and quotation marks.

&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;
- (NSData*) getSimpleJSON {
    NSString* jsonString = @&amp;quot;{ \
        \&amp;quot;person\&amp;quot;: \&amp;quot;Usman\&amp;quot; \
    }&amp;quot;;
    return  [jsonString dataUsingEncoding:NSUTF8StringEncoding];
}

- (NSData*) getNestedJSON {
    NSString* jsonString = @&amp;quot;{                      \
        \&amp;quot;person\&amp;quot;: {                               \
            \&amp;quot;name\&amp;quot;: \&amp;quot;Usman\&amp;quot;,                    \
            \&amp;quot;job\&amp;quot;: \&amp;quot;Software Engineer\&amp;quot;   \
        }                                           \
    }&amp;quot;;
   return  [jsonString dataUsingEncoding:NSUTF8StringEncoding];
}

- (NSData*) getJSONList {
    NSString* jsonString = @&amp;quot;                                       \
    {                                                               \
        \&amp;quot;directory\&amp;quot;: [                                            \
                      {                                             \
                          \&amp;quot;person\&amp;quot;: {                            \
                              \&amp;quot;name\&amp;quot;: \&amp;quot;Usman\&amp;quot;,                  \
                              \&amp;quot;job\&amp;quot;: \&amp;quot;Software Engineer\&amp;quot;        \
                          }                                         \
                      },                                            \
                      {                                             \
                          \&amp;quot;person\&amp;quot;: {                            \
                              \&amp;quot;name\&amp;quot;: \&amp;quot;Someone else\&amp;quot;,           \
                              \&amp;quot;job\&amp;quot;: \&amp;quot;Some other profession\&amp;quot;    \
                          }                                         \
                      }                                             \
                ]                                                   \
    }                                                               \
    &amp;quot;;
   return  [jsonString dataUsingEncoding:NSUTF8StringEncoding];
}
&amp;lt;/pre&amp;gt;


&amp;lt;h3&amp;gt;Parsing JSON&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Look for the -(void)action:(id)sender method in the code and delete all the code within the method. In it&amp;apos;s place we will first initialize an instance of the JsonDecoder. We then use the &amp;lt;em&amp;gt;objectWithData&amp;lt;/em&amp;gt; of the decoder to parse our simple JSON String into a NSDictionary object. Each property in the json source becomes a key value in the dictionary. The code below shows how we would retrieve the the value of a particular property and output it to console log. 

&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;
-(void)action:(id)sender {
    JSONDecoder* decoder = [[JSONDecoder alloc] init];
    NSDictionary *resultsDictionary = [decoder objectWithData:[self getSimpleJSON]];
    NSLog(@&amp;quot;Person: %@&amp;quot;,[resultsDictionary objectForKey:@&amp;quot;person&amp;quot;]);
}
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Each nested object is parsed as a dictionary of its own, for example when we parse the nested json string we first get a dictionary which contains a key mapping from &amp;lt;em&amp;gt;person&amp;lt;/em&amp;gt; to another dictionary. The second dictionary contains the person&amp;apos;s name and job as key value pairs as shown in the code below. 
&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;	
    NSDictionary *nestedDictionary  = [decoder objectWithData:[self getNestedJSON]];
    NSDictionary *personDictionay =  [nestedDictionary objectForKey:@&amp;quot;person&amp;quot;];
    
    NSLog(@&amp;quot;Name: %@&amp;quot;,[personDictionay objectForKey:@&amp;quot;name&amp;quot;]);
    NSLog(@&amp;quot;Job: %@&amp;quot;,[personDictionay objectForKey:@&amp;quot;job&amp;quot;]);
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
JSON Lists map to a an NSArray object where each element of the list is mapped to a NSDictionary object containing the element. For example in our JSONList string the primary dictionary contains a key &amp;lt;em&amp;gt;directory&amp;lt;/em&amp;gt; which maps to a NSArray of dictionaries. Each element in the NSArray maps to a NSDictionary with a key &amp;lt;em&amp;gt;person&amp;lt;/em&amp;gt; which returns a dictionary with the name and job of the person. 
 
&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;	
  NSDictionary* listDictionary = [decoder objectWithData:[self getJSONList]];
    NSArray* people =[listDictionary objectForKey:@&amp;quot;directory&amp;quot;];


    for (NSDictionary *person in people) {    
        NSDictionary *personDetails = [person objectForKey:@&amp;quot;person&amp;quot;];
        NSLog(@&amp;quot;Name: %@&amp;quot;,[personDetails objectForKey:@&amp;quot;name&amp;quot;]);
        NSLog(@&amp;quot;Job: %@&amp;quot;,[personDetails objectForKey:@&amp;quot;job&amp;quot;]);
    }
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Running the code&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The complete method should now look something like the code shown below. Build &amp;amp; Run your project and click the button on the iPhone emulator when it pops up.
&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;	
-(void)action:(id)sender
{
    JSONDecoder* decoder = [[JSONDecoder alloc] init];
    NSDictionary *simpleDictionary = [decoder objectWithData:[self getSimpleJSON]];
    NSLog(@&amp;quot;Person: %@&amp;quot;,[simpleDictionary objectForKey:@&amp;quot;person&amp;quot;]);
    
    NSDictionary *nestedDictionary  = [decoder objectWithData:[self getNestedJSON]];
    NSDictionary *personDictionay =  [nestedDictionary objectForKey:@&amp;quot;person&amp;quot;];
    
    NSLog(@&amp;quot;Name: %@&amp;quot;,[personDictionay objectForKey:@&amp;quot;name&amp;quot;]);
    NSLog(@&amp;quot;Job: %@&amp;quot;,[personDictionay objectForKey:@&amp;quot;job&amp;quot;]);
    
    NSDictionary* listDictionary = [decoder objectWithData:[self getJSONList]];
    NSArray* people =[listDictionary objectForKey:@&amp;quot;directory&amp;quot;];


    for (NSDictionary *person in people) {    
        NSDictionary *personDetails = [person objectForKey:@&amp;quot;person&amp;quot;];
        NSLog(@&amp;quot;Name: %@&amp;quot;,[personDetails objectForKey:@&amp;quot;name&amp;quot;]);
        NSLog(@&amp;quot;Job: %@&amp;quot;,[personDetails objectForKey:@&amp;quot;job&amp;quot;]);
    }
}
&amp;lt;/pre&amp;gt;

Look at your console log and it should show the parsed out data that we printed to the log:
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
2011-10-16 17:45:12.201 HelloWorld[4005:f803] Person: Usman


2011-10-16 17:45:12.203 HelloWorld[4005:f803] Name: Usman
2011-10-16 17:45:12.203 HelloWorld[4005:f803] Job: Software Engineer


2011-10-16 17:45:12.204 HelloWorld[4005:f803] Name: Usman
2011-10-16 17:45:12.204 HelloWorld[4005:f803] Job: Software Engineer
2011-10-16 17:45:12.204 HelloWorld[4005:f803] Name: Someone else
2011-10-16 17:45:12.205 HelloWorld[4005:f803] Job: Some other profession

&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Source Code&amp;lt;/h3&amp;gt;
The updated HelloWorld project source code with changes that we made in this tutorial can be downloaded &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/10/HelloWorld_JSONKit.zip&amp;apos;&amp;gt;HelloWorld_JSONKit&amp;lt;/a&amp;gt;.&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>iPhoneSDK: NSUserDefaults</title>
   <link href="http://username.github.com/2011/10/10/iphonesdk-nsuserdefaults"/>
   <updated>2011-10-10T15:10:55-04:00</updated>
   <id>http://username.github.com/2011/10/10/iphonesdk-nsuserdefaults</id>
   <content type="html">&lt;p&gt;One of the common use case when writing an iPhone app is to store user preferences and other application settings such that they are globally accessible within your app and persistent across restarts. While you could use the persistence API for this purpose there is a much simpler solution using NSUserDefaults. NSUserDefaults provides you with access to a persistent global key value store. &lt;!--more--&gt; &lt;h3&gt; Storing Objects&lt;/h3&gt; To store an object create an instance of NSUserDefaults with the standardUserDefaults method and then use the setObject method to store your object against a key much as you would do in a NSMutableDictionary. Normally the properties are stored in memory and written to backing store periodically. To force a persistent storage update call the synchronize method.&lt;/p&gt;
&lt;pre lang='objC'&gt;
    NSString* message = @&quot;This is the message.&quot;;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:message forKey:@&quot;message&quot;];
    [defaults synchronize];
&lt;/pre&gt;&lt;h3&gt; Retriving objects&lt;/h3&gt;
&lt;p&gt;To retrieve an object from NSUserDefaults just create a instance much like before with and then call the &lt;em&gt;foo&lt;/em&gt;ForKey method where foo can be any one of; array, bool, data, dictionary, float, integer, object, stringArray, string, double, URL.&lt;/p&gt;
&lt;pre lang='objC'&gt;    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    NSString* message = [defaults stringForKey:@&quot;message&quot;];
&lt;/pre&gt;
&lt;p&gt;The last value set for each key will be retrieved across application restarts.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using cachedump to debug memcached</title>
   <link href="http://username.github.com/2011/10/02/using-cachedump-to-debug-memcached"/>
   <updated>2011-10-02T18:23:27-04:00</updated>
   <id>http://username.github.com/2011/10/02/using-cachedump-to-debug-memcached</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
If you are using &amp;lt;a href=&amp;quot;http://http://memcached.org/&amp;quot; title=&amp;quot;memcached&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;memcahced&amp;lt;/a&amp;gt; for caching it will be is sometimes necessary to check the state of the cache. There is no way to dump all keys stored in a memcached server but using cache dump we can retrieve about a megabyte of data which is often sufficient for debugging.
&amp;lt;!--more--&amp;gt;
To retrieve the keys first telnet to your server:
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
telnet localhost 11211
&amp;lt;/pre&amp;gt;

Use the stats command to get stats about the different slabs of keys in your server. The number after &amp;quot;items:&amp;quot; is a slab id and memecached will store your stats in several slabs. 

&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
stats items
STAT items:1:number 1
STAT items:1:age 3430476
STAT items:1:evicted 0
STAT items:1:evicted_nonzero 0
STAT items:1:evicted_time 0
STAT items:1:outofmemory 0
STAT items:1:tailrepairs 0
STAT items:1:reclaimed 113
STAT items:2:number 4
STAT items:2:age 555952
STAT items:2:evicted 0
STAT items:2:evicted_nonzero 0
STAT items:2:evicted_time 0
STAT items:2:outofmemory 0
STAT items:2:tailrepairs 0
STAT items:2:reclaimed 12
STAT items:3:number 4
STAT items:3:age 2894457
STAT items:3:evicted 0
STAT items:3:evicted_nonzero 0
STAT items:3:evicted_time 0
STAT items:3:outofmemory 0
STAT items:3:tailrepairs 0
STAT items:3:reclaimed 4
STAT items:4:number 2
STAT items:4:age 3411747
STAT items:4:evicted 0
STAT items:4:evicted_nonzero 0
STAT items:4:evicted_time 0
STAT items:4:outofmemory 0
STAT items:4:tailrepairs 0
STAT items:4:reclaimed 9
STAT items:8:number 18
STAT items:8:age 1330321
STAT items:8:evicted 0
STAT items:8:evicted_nonzero 0
STAT items:8:evicted_time 0
STAT items:8:outofmemory 0
STAT items:8:tailrepairs 0
STAT items:8:reclaimed 1
STAT items:10:number 11
STAT items:10:age 3238392
STAT items:10:evicted 0
STAT items:10:evicted_nonzero 0
STAT items:10:evicted_time 0
STAT items:10:outofmemory 0
STAT items:10:tailrepairs 0
STAT items:10:reclaimed 0
END
&amp;lt;/pre&amp;gt;

To get the keys stored in each slab use the cachedump command. In the command shown below we are retrieving a maximum of hundred keys from the 4th slab.
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
stats cachedump 4 100 
&amp;lt;/pre&amp;gt;

That&amp;apos;s it, happy debugging. &lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>IPhone SDK: TabBars</title>
   <link href="http://username.github.com/2011/10/02/iphone-sdk-tabbars"/>
   <updated>2011-10-02T16:54:40-04:00</updated>
   <id>http://username.github.com/2011/10/02/iphone-sdk-tabbars</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;This is a tutorial for beginners to the IPhone SDK and includes instructions on programatically creating a Tab Bar Controller with two Tabs and their associated views. As an illustration of how interface elements from one view can interact with those on other views I have placed a UITextField and Button on one view and a UILabel on the other. Anything typed in the text field will be copied to the label when the button is clicked. If you do now want to write all the code for the tutorial you can download it here:&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/10/TabBar.zip'&gt;Source Project&lt;/a&gt;.&lt;/p&gt;&lt;!--more--&gt;&lt;h3&gt;Step 1: Read the Hello World tutorial&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;If you are are unfamiliar with developing in Objective C and IPhone SDK please take a moment to go through the earlier tutorial &lt;a href='http://www.techtraits.ca/?p=80' title='IPhone SDK Hello World'&gt;IPhone SDK Hello World&lt;/a&gt;. It also contains instructions on how to install XCode and the IPhone SDK.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_438&amp;#8221; align=&amp;#8221;alignright&amp;#8221; width=&amp;#8221;300&amp;#8221; caption=&amp;#8221;Figure 1: Create Project&amp;#8221;&lt;/span&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/10/project_create.png'&gt;&lt;img alt='' class='size-medium wp-image-438' height='225' src='http://www.techtraits.ca/wp-content/uploads/2011/10/project_create-300x225.png' title='Create Project' width='300' /&gt;&lt;/a&gt;&lt;span&gt;/caption&lt;/span&gt; &lt;h3&gt;Step 2: Create a project&lt;/h3&gt; &lt;p style='text-align: justify;'&gt;Select File &amp;gt; New Project or Apple Key + Shft + N to bring up the new project menu. Select the Applications item of the IPhone OS section from the menu on the left, and select Window Based Application from the icons on the right. When prompted enter a project name, I have used TabBar in the sample code. You should have two files TabBarAppDelegate.h and TabBarAppDelegate.m. (See Figure 1)&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Step 3: Create the View Controllers&lt;/h3&gt;
&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_440&amp;#8221; align=&amp;#8221;alignright&amp;#8221; width=&amp;#8221;300&amp;#8221; caption=&amp;#8221;Figure 2 Create New File&amp;#8221;&lt;/span&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/10/newfile.png'&gt;&lt;img alt='' class='size-medium wp-image-440' height='200' src='http://www.techtraits.ca/wp-content/uploads/2011/10/newfile-300x200.png' title='New File' width='300' /&gt;&lt;/a&gt;&lt;span&gt;/caption&lt;/span&gt; &lt;p style='text-align: justify;'&gt;We are going to create two tabs and we need a view controller for each one. Use &lt;strong&gt;Ctrl + N&lt;/strong&gt;to bring up the new file menu and create two files of type UIViewController SubClass. I named the files View1Controller.m and View2Controller.m (See Figure 2)&lt;/p&gt; Now You should have Six files in your project: &lt;pre lang='bash'&gt;TabBarAppDelegate.m
TabBarAppDelegate.h
View1Controller.m
View1Controller.h
View2Controller.m
View3Controller.h&lt;/pre&gt; &lt;h3&gt;Step 4: Setup the View Controllers&lt;/h3&gt; &lt;h4&gt;View1Controller&lt;/h4&gt; &lt;p style='text-align: justify;'&gt;First we will setup the view containing the Button and Text Field. Browse to the View1Controller.h header file and add the following interface elements, UITextField, UIButton, UIView and also add a reference to the Application delegate which will be used to communicate between views. We also create properties for each of the variables we have defined. The final code should look something like this:&lt;/p&gt;&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;objC&amp;quot;&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &amp;quot;TabBarAppDelegate.h&amp;quot;;

@class TabBarAppDelegate;
@interface View1Controller : UIViewController
{
     UITextField                *textField;
     UIButton                   *cmdButton;
     UIView                     *myView;
     TabBarAppDelegate          *delegateRef;
}

     @property (nonatomic, assign)    UITextField                 *textField;
     @property (nonatomic, assign)    UIButton                    *cmdButton;
     @property (nonatomic, assign)    UIView                      *myView;
     @property (nonatomic, assign)    TabBarAppDelegate           *delegateRef;

@end&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;In the View1Controller.m file synthesize the properties and write an init method to create the user interface elements. Technically this should be in the load view method but since I am allowing one view to directly access another. WE need them to be initialized even if they are not loaded. The proper way to do this is to store data separately and pull it when the view is loaded but i want to keep this tutorial simple.&lt;/p&gt;&lt;pre lang='objC'&gt;- (id)init
{
	if (self == [super init]) {
		// Initialization code
		self.title = @&quot;Text and Button&quot;; //Set View title which will be displayed in Tab Bar
		// create and configure the view
		CGRect cgRct = CGRectMake(0.0, 0.0, 480, 320); //define size and position of view
		myView = [[UIView alloc] initWithFrame:cgRct]; //initilize the view
		myView.autoresizesSubviews = YES;              //allow it to tweak size of elements in view
		self.view = myView;                            //set view property ov controller to the newly created view

		// create a UIButton (UIButtonTypeRoundedRect)
		cmdButton = [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
		cmdButton.frame = CGRectMake(100, 100, 100, 50);
		[cmdButton setTitle:@&quot;Click Me&quot; forState:UIControlStateNormal];
		cmdButton.backgroundColor = [UIColor clearColor];
		[cmdButton addTarget:self action:@selector(action:) forControlEvents:UIControlEventTouchUpInside];
		cmdButton.adjustsImageWhenHighlighted = YES;
		//create a text field
		cgRct = CGRectMake(60, 170, 200, 50); //define size and position of textbox
		textField = [[UITextField alloc] initWithFrame:cgRct];
		textField.text = @&quot;Enter Text Here&quot;;
		textField.borderStyle = UITextBorderStyleBezel;
		//Add text field and button to main view
		[self.view addSubview:cmdButton];
		[self.view addSubview:textField];
	}
	return self;
}&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;We also need to add an action handler to take care of the button click. Add the following method to View1Controller.m. We use the delegate reference to get a reference to the second view controller and the label that we will create in the second view shortly.&lt;/p&gt;&lt;pre lang='objC'&gt;- (void)action:(id)sender {
	[self.textField resignFirstResponder]; //Hide Keyboard
	self.delegateRef.view2Controller.label.text = self.textField.text;//Update label
}&lt;/pre&gt;&lt;h4&gt;View2Controller&lt;/h4&gt;&lt;p style='text-align: justify;'&gt;On to the second view controller, we do not keep an app delegate instance here because this view does not need to initiate any interaction with the first view. If this were not the case then we would also keep a reference here&lt;/p&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;objC&amp;quot;&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface View2Controller : UIViewController
{
	UILabel    *label;
	UIView    *myView;
}

@property (nonatomic, assign)     UILabel    *label;
@property (nonatomic, assign)    UIView      *myView;

@end&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;In the View2Controller.m file synthesize the properties and write and init method to create the user interface elements.&lt;/p&gt;&lt;pre lang='objC'&gt;@synthesize myView;
@synthesize label;

-(id)init{
	if(self == [super init])
	{
		//Initialization code
		self.title = @&quot;Label&quot;; //Set View title which will be displayed in Tab Bar
		//create and configure the view
		CGRect cgRct = CGRectMake(0.0, 0.0, 480, 320);
		myView = [[UIView alloc]initWithFrame:cgRct];
		myView.autoresizesSubviews = YES;
		self.view = myView;

		//create a text field
		cgRct = CGRectMake(60, 170, 200, 50); //define size and position of textbox
		label = [[UILabel alloc] initWithFrame:cgRct];
		label.text = @&quot;Enter Text Here&quot;;

		//Add text field and button to main view
		[self.view addSubview:label];
	}
	return self;
}&lt;/pre&gt;&lt;h3&gt;Step 5: Setting Up the App Delegate&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;In the TabBarAppDelegate.h header file we define instances of the UITabBarController as well as the two views we have just setup. We create properties for these variables an also declare he relevent classes and import the relevent header files. The final code should look something like this:&lt;/p&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;objC&amp;quot;&amp;gt;
#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &amp;quot;View1Controller.h&amp;quot;
#import &amp;quot;View2Controller.h&amp;quot;

@class TabBarViewController;
@class View1Controller;
@class View2Controller;

@interface TabBarAppDelegate : NSObject
{
    UIWindow *window;
    UITabBarController *tabBarController;
    View1Controller *view1Controller;
    View2Controller *view2Controller;
}

@property (nonatomic, assign) UIWindow *window;
@property (nonatomic, assign) UITabBarController *tabBarController;
@property (nonatomic, assign) View1Controller *view1Controller;
@property (nonatomic, assign) View2Controller *view2Controller;
@end&amp;lt;/pre&amp;gt;&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;In the implementation file TabBarAppDelegate.m update the didFinishLaunchingWithOptions method to create the view controllers and the tab bar controllers and add them to the window. The code for this is as follows.&lt;/p&gt;&lt;pre lang='objC'&gt;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.
    //Initilize objects
    tabBarController = [[UITabBarController alloc] init];
    view1Controller = [[View1Controller alloc] init];
    view2Controller = [[View2Controller alloc] init];  

    //Add a refernce to self in the View1Controller so that it can reference View2Controller via this object
    view1Controller.delegateRef = self;

    //Add views to the TabBar
    tabBarController.viewControllers = [NSArray arrayWithObjects:view1Controller, view2Controller, nil];    

    //Add tabbar to window and display
    [window addSubview:tabBarController.view];
    [window makeKeyAndVisible];
    return YES;
}&lt;/pre&gt;
&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_442&amp;#8221; align=&amp;#8221;alignleft&amp;#8221; width=&amp;#8221;158&amp;#8221; caption=&amp;#8221;Figure 3: Enter Text in Tab 1&amp;#8221;&lt;/span&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/10/phone1.png'&gt;&lt;img alt='' class='size-medium wp-image-442' height='300' src='http://www.techtraits.ca/wp-content/uploads/2011/10/phone1-158x300.png' title='Enter Text' width='158' /&gt;&lt;/a&gt;&lt;span&gt;/caption&lt;/span&gt; &lt;h3&gt;Step 6: Build and Go&lt;/h3&gt; &lt;span&gt;caption id=&amp;#8221;attachment_443&amp;#8221; align=&amp;#8221;alignright&amp;#8221; width=&amp;#8221;155&amp;#8221; caption=&amp;#8221;Figure 4: Updated Label in Tab 2&amp;#8221;&lt;/span&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/10/phone2.png'&gt;&lt;img alt='' class='size-medium wp-image-443' height='300' src='http://www.techtraits.ca/wp-content/uploads/2011/10/phone2-155x300.png' title='phone2' width='155' /&gt;&lt;/a&gt;&lt;span&gt;/caption&lt;/span&gt; &lt;p style='text-align: justify;'&gt;Click the Build an Go button to run your code and you should see the Tab Bar with the first view Loaded. Enter your teck and click the button on the screen. Now load the second view by clicking the right Tab and see your text updated there.&lt;/p&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Compiling Protocol Buffers from Maven</title>
   <link href="http://username.github.com/2011/09/09/compiling-protocol-buffers-from-maven"/>
   <updated>2011-09-09T15:46:43-04:00</updated>
   <id>http://username.github.com/2011/09/09/compiling-protocol-buffers-from-maven</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;&lt;a href='http://code.google.com/p/protobuf/' target='_blank' title='Protocol Buffer'&gt;Protocol buffer&lt;/a&gt; is a technology made by google for automatic serialization of data to and from a compressed binary format. Essentially you define your data in a &lt;strong&gt;I&lt;/strong&gt;nterface &lt;strong&gt;D&lt;/strong&gt;efinition &lt;strong&gt;L&lt;/strong&gt;anguage &lt;a href='http://en.wikipedia.org/wiki/IDL_%28programming_language%29' target='_blank' title='IDL'&gt;(IDL)&lt;/a&gt; and then generate bindings for any language from which you want to generate the data or consume data. It is very similar to &lt;a href='http://thrift.apache.org/' target='_blank' title='Thrift'&gt;Thrift&lt;/a&gt; in philosophy and function except that Thrift provides network transport as well as serialization.&lt;/p&gt;&lt;!--more--&gt;&lt;p style='text-align: justify;'&gt;As with all code generation frameworks the first problem we need to tackle is how to efficiently integrate the code generation into our build pipeline. There some important requirements for such an integration. First, the generated code should not be checked in manually or if possible it should not be checked in at all as this will lead to frustration later. Developers will forget to checking generated files, overwrite each others' changes as generate code tends to be verbose and unfamiliar to the user. Second, the generated code should be available for debugging otherwise development around the generated code will be frustrating and slow. Third, incompatible changes to the source IDL files should break the build. Last, people who do not need to edit the IDL files should not have to generate the code locally as this will be another piece of tech they will maintain.&lt;/p&gt;&lt;p style='text-align: justify;'&gt;To support all of these requirements I use a &lt;a href='http://maven.apache.org/' target='_blank' title='Maven'&gt;Maven&lt;/a&gt; based build pipeline with a &lt;a href='http://nexus.sonatype.org/' target='_blank' title='Nexus Sonatype'&gt;Nexus Sonatype repository&lt;/a&gt; for storing artifacts which can then be used for all developers in their local builds. This tutorial will give a step by step guide to setting up such a project. Note this tutorial is only compatible with Linix/Unix systems or cygwin if you are on windows&lt;/p&gt;&lt;h3 style='text-align: justify;'&gt;Tools of the trade&lt;/h3&gt;
&lt;p&gt;Before going further you will need to install the following tools. &lt;strong&gt;Java 6 SDK. &lt;/strong&gt;The first step is to download and install Java from &lt;a href='http://www.java.com/en/download/' target='_blank' title='http://www.java.com/en/download/'&gt;http://www.java.com/en/download/&lt;/a&gt; in this tutorial we will be generating code for Java and C++. &lt;strong&gt;Maven 3.&lt;/strong&gt; Next we download and install Apache Maven 3 from &lt;a href='http://maven.apache.org/download.html' target='_blank' title='http://maven.apache.org/download.html'&gt;http://maven.apache.org/download.html&lt;/a&gt;. The installation process is simple enough and I won&amp;#8217;t get into the details. Please feel free to ask questions in the comments or the forum if you get stuck.&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;pre lang='bash'&gt;#Run this command to check the correct version of Maven is installed, in the path
$mvn  --version
#It should echo the following line among other output.
Apache Maven 3.X.X ....&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;&lt;strong&gt;Nexus Repository.&lt;/strong&gt;You will need to setup a nexus repository in order to share the packaged, generated sources between developers. I have created a simple tutorial on setting up a Nexus repository. &lt;a href='http://www.techtraits.ca/?p=315' target='_blank' title='Setting up Nexus Repository '&gt;Here&lt;/a&gt;&lt;/p&gt;&lt;p style='text-align: justify;'&gt;&lt;strong&gt;Protocol Buffer Compiler.&lt;/strong&gt; You will need to install the protocol buffer compiler which can be downloaded &lt;a href='http://protobuf.googlecode.com/files/protobuf-2.4.1.tar.bz2' title='http://protobuf.googlecode.com/files/protobuf-2.4.1.tar.bz2'&gt;here&lt;/a&gt;. Detailed installation instructions for the protocol buffer compiler can be found &lt;a href='http://code.google.com/p/protobuf/source/browse/trunk/INSTALL.txt' target='_blank' title='http://code.google.com/p/protobuf/source/browse/trunk/INSTALL.txt'&gt;here&lt;/a&gt;. However, the basic steps are to untar the package, browse to the directory in the terminal or cygwin and run the following commands.&lt;/p&gt;&lt;pre lang='bash'&gt;./configure
make
sudo make install
protoc --version&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;&lt;strong&gt;Maven Protoc Plugin&lt;/strong&gt;In order to compile protocol buffer you would need to compile and install the Maven Protoc Plugin (Full disclosure: I am a contributor to the plugin). The source is available on github at &lt;a href='https://github.com/usmanismail/maven-protoc-plugin' target='_blank' title='https://github.com/usmanismail/maven-protoc-plugin'&gt;https://github.com/usmanismail/maven-protoc-plugin&lt;/a&gt; or you can download the source &lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/09/maven-protoc-plugin.zip'&gt;here&lt;/a&gt;. Unzip the package and run the following commands to compile the plugin&lt;/p&gt;&lt;pre lang='bash'&gt;
cd maven-protoc-plugin
mvn clean install
&lt;/pre&gt;
&lt;p&gt;&amp;#160; &lt;h3&gt;Creating maven project&lt;/h3&gt; &lt;p style='text-align: justify;'&gt;We will be keeping our protocol buffer IDL files in a maven project which will be deployed to the Nexus repository we just setup. We keep our IDL files a little maven project of its own so to ensure the four requirements for integration that we specified in the start of this tutorial. I will highlight how we fulfill each requirement as we go. To create a simple Maven java project run the following command:&lt;/p&gt;&lt;/p&gt;
&lt;pre lang='bash'&gt;mvn archetype:generate \
  -DgroupId=com.flybynight.protobuff \
  -DartifactId=protocompiler \
  -DarchetypeArtifactId=java-1.6-archetype  \
  -DarchetypeVersion=0.0.2  \
  -DarchetypeGroupId=net.avh4.mvn.archetype \
  -Dversion=1.0-SNAPSHOT&lt;/pre&gt;&lt;p style='text-align: justify;'&gt;This will create a base project for you called &quot;protocompiler&quot; if you cd to the newly created directory you should be able to see that it already contains a src folder and a pom.xml file.&lt;/p&gt;&lt;pre lang='bash'&gt;cd protoccompiler
ls -l
-rw-r--r--  1 usman  staff  1637  5 Sep 19:02 pom.xml
drwxr-xr-x  4 usman  staff   136  5 Sep 19:02 src&lt;/pre&gt;
&lt;p&gt;&amp;#160; &lt;h3&gt;Writing your Proto Files&lt;/h3&gt; &lt;p style='text-align: justify;'&gt;cd to src/main/resources and create a new file called hello.proto and add the following text:&lt;/p&gt;&lt;/p&gt;
&lt;pre lang='proto'&gt;message HelloWorld {
  required string message = 1;
}&lt;/pre&gt;
&lt;p&gt;We can test out protocol buffer compiler installation and that our file is valid by running the command shown below. It will generate the Hello.java file. &lt;pre lang='bash'&gt;protoc -I=./ --java_out=./ hello.proto
ls -l&lt;/pre&gt;&lt;/p&gt;
&lt;h3&gt;Generating Source Files&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now we get to the automatic generation of the source files which we do using the maven-protoc-plugin we installed earlier. Open the pom file at protoccompiler/pom.xml, look for the &amp;quot;dependencies&amp;quot; element and add the following dependency to pull in protocol buffer support files.

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.4.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now look for the &amp;quot;plugins&amp;quot; element and add the plugin definition below. We are invoking the &amp;quot;maven-protoc-plugin&amp;quot; that we compiled earlier in the tutorial by specifying its groupId and artifactId. In the configuration section we are specifying the protocol buffer compiler binary using &amp;quot;protocExecutable&amp;quot;. Note that this assumes that protoc is in the path. If this is not the case you can specify the fully qualified path to the binary. Using &amp;quot;protoSourceRoot&amp;quot; we are specifying the location of the proto files. The plugin looks for files in the specified directory with the &amp;quot;.proto&amp;quot; extension. We are then specifying that we wish to generate sources for Java and C++ using the &amp;quot;JAVA&amp;quot; and &amp;quot;CPP&amp;quot; constants respectively. For each language we also specify a output directory where the generated source will be placed.
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;com.google.protobuf.tools&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;maven-protoc-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;0.1.11-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;configuration&amp;gt;
        &amp;lt;protocExecutable&amp;gt;protoc&amp;lt;/protocExecutable&amp;gt;
        &amp;lt;protoSourceRoot&amp;gt;${project.basedir}/src/main/resources/&amp;lt;/protoSourceRoot&amp;gt;
        &amp;lt;languageSpecifications&amp;gt;
            &amp;lt;LanguageSpecification&amp;gt;
                &amp;lt;language&amp;gt;JAVA&amp;lt;/language&amp;gt;
                &amp;lt;outputDirectory&amp;gt;${project.basedir}/target/generated-sources/java&amp;lt;/outputDirectory&amp;gt;
            &amp;lt;/LanguageSpecification&amp;gt;
	    &amp;lt;LanguageSpecification&amp;gt;
	        &amp;lt;language&amp;gt;CPP&amp;lt;/language&amp;gt;
	        &amp;lt;outputDirectory&amp;gt;${project.basedir}/target/generated-sources/cpp&amp;lt;/outputDirectory&amp;gt;
	    &amp;lt;/LanguageSpecification&amp;gt;
        &amp;lt;/languageSpecifications&amp;gt;						
    &amp;lt;/configuration&amp;gt;
    &amp;lt;executions&amp;gt;
        &amp;lt;execution&amp;gt;
            &amp;lt;goals&amp;gt;
                &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
        &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Once you make the changes save the pom file and compile the project using the mvn clean install command. You should see the generated sources in target/generated-sources/java and target/generated-sources/cpp. Furthermore the generated jar file contains the generated java sources as compiled class files. This fulfills our first requirement that the generated files should not have to be checked in (as they will be available in the jar file). 

&amp;lt;h3&amp;gt;Attach source&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To fulfill our requirement of generated code being easy to debug we will attach a source jar to our artifact. We can do this by adding the maven source plugin to our pom file as shown below.
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;plugin&amp;gt;
	&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;maven-source-plugin&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.1.2&amp;lt;/version&amp;gt;
	&amp;lt;executions&amp;gt;
		&amp;lt;execution&amp;gt;
			&amp;lt;id&amp;gt;attach-sources&amp;lt;/id&amp;gt;
			&amp;lt;goals&amp;gt;
				&amp;lt;goal&amp;gt;jar&amp;lt;/goal&amp;gt;
			&amp;lt;/goals&amp;gt;
		&amp;lt;/execution&amp;gt;
	&amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Deploying to Nexus&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To ensure our last two requirements of breaking the build for incompatible changes but not requiring everyone to build locally we need to deploy our code to the nexus repository. To do this we will create a settings.xml with the data shown below and run &amp;lt;strong&amp;gt;mvn clean install --settings ./settings.xml&amp;lt;/strong&amp;gt;.
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;settings xmlns=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0&amp;quot; 
          xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; 
          xsi:schemaLocation=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;quot;&amp;gt;
&amp;lt;servers&amp;gt;
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;myNexusRepo&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
&amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Pulling from nexus&amp;lt;/h3&amp;gt;
Now we can just setup a maven project to pull in the generated code by adding the dependency shown below. This fulfills our last two requirements, if there is an incompatible change it will break the build for the dependent project without requiring people to build proto files themselves.  

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.flybynight.protobuff&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;protocompiler&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/pre&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Running Nexus Sontaype over Jetty</title>
   <link href="http://username.github.com/2011/09/05/running-nexus-sontaype-over-jetty"/>
   <updated>2011-09-05T18:22:46-04:00</updated>
   <id>http://username.github.com/2011/09/05/running-nexus-sontaype-over-jetty</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;
If you are using Maven for build management you will very soon need to run a repository to store your artifacts and proxy remote artifacts so that your build is not blocked by external dependencies. Setting up a Nexus repository is as easy as deploying a war file to a web server. This tutorial covers the procedure for deploying the Nexus repository on a Jetty 6 web server.&lt;/p&gt;&lt;!--more--&gt;&lt;h3&gt;Download Nexus war file&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;Nexus is distributed as a war file which can be downloaded at &lt;a href='http://nexus.sonatype.org/downloads/' target='_blank' title='http://nexus.sonatype.org/downloads/'&gt;http://nexus.sonatype.org/downloads/&lt;/a&gt;. I used version 1.9.2 which can be downloaded from &lt;a href='http://nexus.sonatype.org/downloads/nexus-webapp-1.9.2.2.war' target='_blank' title='http://nexus.sonatype.org/downloads/nexus-webapp-1.9.2.2.war'&gt;Here&lt;/a&gt;. Rename the downloaded file to something simpler such as nexus.war.&lt;/p&gt;&lt;h3&gt;Download and Setup Jetty&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now download Jetty six from here &amp;lt;a title=&amp;quot;http://dist.codehaus.org/jetty/&amp;quot; href=&amp;quot;http://dist.codehaus.org/jetty/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;http://dist.codehaus.org/jetty/&amp;lt;/a&amp;gt;. I used version 6.1.26 which can be downloaded from &amp;lt;a title=&amp;quot;Jetty 6.1.26&amp;quot; href=&amp;quot;http://dist.codehaus.org/jetty/jetty-6.1.26/jetty-6.1.26.zip&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Here&amp;lt;/a&amp;gt;. Unzip jetty into a folder of your choice and browse to the &amp;quot;contexts&amp;quot; directory. Create a file here called nexus with the text shown below. The contextPath element specifies the context by which users will find the application on your server, e.g. http://[domain-name]/nexus/. The war element specifies the location of the WAR file inside the Jetty home directory, under the standard webapps folder, using a WAR file called nexus.war.
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;  encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE Configure PUBLIC &amp;quot;-//Mort Bay Consulting//DTD Configure//EN&amp;quot; &amp;quot;http://jetty.mortbay.org/configure.dtd&amp;quot;&amp;gt;
&amp;lt;configure class=&amp;quot;org.mortbay.jetty.webapp.WebAppContext&amp;quot;&amp;gt;
    &amp;lt;set name=&amp;quot;contextPath&amp;quot;&amp;gt;/nexus&amp;lt;/set&amp;gt;
    &amp;lt;set name=&amp;quot;war&amp;quot;&amp;gt;&amp;lt;systemproperty name=&amp;quot;jetty.home&amp;quot; default=&amp;quot;.&amp;quot;/&amp;gt;/webapps/nexus.war&amp;lt;/set&amp;gt;
&amp;lt;/configure&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now copy the Sonatype nexus war file into the webapps directory in the jetty base directory.
&amp;lt;h3&amp;gt;Running Jetty&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Open a terminal instance at the jetty root directory and run the following command to start jetty.
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;java -jar start.jar&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;This should start your Nexus repository in the Jetty container. Fire up your favorite browser and go to http://[domain]:8080/nexus/ or http://localhost:8080/nexus/ if you are running Nexus on your local machine. You should be presented with the nexus front end and can start managing your repositories.&amp;lt;/p&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;Note: The default admin user and password are &amp;quot;admin&amp;quot; and &amp;quot;admin123&amp;quot; respectively.&amp;lt;/p&amp;gt;

&amp;lt;h3&amp;gt;Further Reading&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Please see the &amp;lt;a href=&amp;quot;http://www.sonatype.com/books/nexus-book/reference/&amp;quot; title=&amp;quot;http://www.sonatype.com/books/nexus-book/reference/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Nexus docs&amp;lt;/a&amp;gt; for details on how to create and manage maven repositories. &lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Implementing Jackson Views</title>
   <link href="http://username.github.com/2011/08/12/implementing-jackson-views"/>
   <updated>2011-08-12T15:42:53-04:00</updated>
   <id>http://username.github.com/2011/08/12/implementing-jackson-views</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;My previous &lt;a href='http://www.techtraits.ca/?p=217'&gt;tutorial&lt;/a&gt; detailed how to use the Jackson library to automatically serialize to and from JSON. However, what if you want to serialize objects differently based on the context. For example, you may want to store some internal state about the object in a data store but not want to report that state to the client. So when you serialize for client you would skip some parameters, wouldn't it be great if there was an easy way to do this using Jackson? Well there is, Views.&lt;/p&gt;
&lt;p&gt;I am going to use the code we wrote in my last tutorial as a starting point so if you have not already done so go grab that code and go through the tutorial quickly. &lt;!--more--&gt; &lt;h3&gt;Defining the views&lt;/h3&gt; &lt;p style='text-align: justify;'&gt;Jackson uses classes to mark views so lets create a class called &quot;JacksonViews&quot; to contain all our views. The class will have a member variable of type class for each view we want to implement. Lets create a default view and an internal view and a client view. The code will look something like this:&lt;/p&gt;&lt;/p&gt;
&lt;pre lang='java'&gt;public class JacksonViews {
	public static class ClientView extends DefaultView {}
	public static class InternalView extends DefaultView {}
	public static class DefaultView {}
}&lt;/pre&gt;&lt;h3&gt;Updating annotations for view&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;Open up Child1.java and look for the SerializeMe parameter. In the previous tutorial we had only two types of parameters; Json Properties and ignored parameters. For this tutorial we will replace the SerializeMe with three parameters: SerializeMeAlways, SerializeMeClient and SerializeMeInternal. The SerializeMeAlways parameter will be given the additional annotation JacksonView with the &quot;JacksonViews.DefaultView&quot;. Similarly the other two properties will be annotated with the JacksonView annotation with values &quot;JacksonViews.ClientView&quot; and &quot;JacksonViews.InternalView&quot; respectively. The code should now something like this.&lt;/p&gt;&lt;pre lang='java'&gt;import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonIgnore;

@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property=&quot;objectType&quot;)
public class Child1 extends ParentClass {

        @JsonView(JacksonViews.DefaultView.class)
	@JsonProperty
	public int SerializeMeAlways;

        @JsonView(JacksonViews.InternalView.class)
        @JsonProperty
        public int SerializeMeInternal;

        @JsonView(JacksonViews.ClientView.class)
        @JsonProperty
	public int SerializeMeClient;

	@JsonIgnore
	public int DontSerializeMe;
}&lt;/pre&gt;&lt;h3&gt;Serializing using view&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;Finally lets open up the the Driver.java file and update the code to see how the views work. We can create an instance of Child1 and set values for all the parameters we specified. We then use the &quot;setSerializationConfig&quot; method of the object mapper to add views to the mapper. In the code below we are first adding the client view then the internal view.&lt;/p&gt;&lt;pre lang='java'&gt;import org.codehaus.jackson.map.ObjectMapper;
import java.util.Arrays;

public class Driver {
	public static void main(String[] args) {

		try {
			ObjectMapper oMapper = new ObjectMapper();

			Child1 child1 = new Child1();
			child1.SerializeMeAlways = 1;
			child1.SerializeMeClient = 1;
			child1.SerializeMeInternal = 1;
			child1.DontSerializeMe = 12;

			oMapper.setSerializationConfig(oMapper.getSerializationConfig().withView(JacksonViews.ClientView.class));
			printChild(child1,oMapper); 

			oMapper.setSerializationConfig(oMapper.getSerializationConfig().withView(JacksonViews.InternalView.class));
			printChild(child1,oMapper); 

		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public static void printChild(Child1 child1, ObjectMapper oMapper) throws Exception{
		String outputChild1 = oMapper.writeValueAsString(child1);
		System.out.println(outputChild1);

		ParentClass inputChild1 = oMapper.readValue(outputChild1, ParentClass.class);
		System.out.println(inputChild1.getClass().toString());

	}

}&lt;/pre&gt;&lt;h3&gt;Compiling and running the code&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;To compile the code fireup a terminal or the command line and enter the following command:&lt;/p&gt;&lt;pre lang='bash'&gt;javac -classpath jackson-all-1.8.4.jar:./ *.java&lt;/pre&gt;
&lt;p&gt;To run the code run the following command: &lt;pre lang='bash'&gt;java -classpath jackson-all-1.8.4.jar:./ Driver&lt;/pre&gt; Your output should be something like: &lt;pre lang='json'&gt;{&quot;objectType&quot;:&quot;Child1&quot;,&quot;SerializeMeAlways&quot;:1,&quot;SerializeMeClient&quot;:1}
class Child1
{&quot;objectType&quot;:&quot;Child1&quot;,&quot;SerializeMeAlways&quot;:1,&quot;SerializeMeInternal&quot;:1}
class Child1&lt;/pre&gt; &lt;p style='text-align: justify;'&gt;Notice that the first time we output the object using the client view jackson writes the SerializeMeClient parameter but not the SerializeMeInternal parameter. Similarly, when we use the internal view the SerializeMeInternal is present but the SerializeMeClient is not. The SerializeMeAlways parameter is as the name suggests is always present.&lt;/p&gt;&lt;/p&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;The source code shown here can be &lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/08/jackson_views.zip'&gt;Downloaded Here&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Polymorphic JSON Serialization using Jackson</title>
   <link href="http://username.github.com/2011/07/27/polymorphic-json-serialization-using-jackson"/>
   <updated>2011-07-27T23:32:28-04:00</updated>
   <id>http://username.github.com/2011/07/27/polymorphic-json-serialization-using-jackson</id>
   <content type="html">&lt;p style='text-align: justify;'&gt;JSON is a lightweight language independent data-interchange format which is one of the common ways of encoding data over HTTP. This articles goes over the use of the &lt;a href='http://jackson.codehaus.org/'&gt;Jackson&lt;/a&gt; library to serialize and deserialize Java object to JSON.&lt;/p&gt;&lt;!--more--&gt;&lt;h3&gt;Project Setup&lt;/h3&gt;&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
If you have not already done so download and install a latest copy of the &amp;lt;a href=&amp;quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&amp;quot;&amp;gt;JDK&amp;lt;/a&amp;gt;. Also download the latest &amp;lt;a href=&amp;quot;http://jackson.codehaus.org/1.8.4/jackson-all-1.8.4.jar&amp;quot;&amp;gt;Jackson Jar&amp;lt;/a&amp;gt; file. Create a folder with the jar file, and a few classes you want to serialize. I created ParentClass.java, Child1.java and Child 2.java.
&amp;lt;h3&amp;gt;Parent.java&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;The excerpt below shows the contents of Parent.java, note that we are annotating the class to help with serialization. The &amp;quot;JsonTypeInfo&amp;quot; annotation tells jackson to encode the object type in the resulting JSON output in a field called objectType. Further we are also defining the possible subtypes of Parent which any input JSON text could be serialized.&amp;lt;/p&amp;gt;

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;import org.codehaus.jackson.annotate.JsonSubTypes;
import org.codehaus.jackson.annotate.JsonTypeInfo;

@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property=&amp;quot;objectType&amp;quot;)
@JsonSubTypes({
        @JsonSubTypes.Type(value=Child1.class),
        @JsonSubTypes.Type(value=Child2.class)
})
public class ParentClass {

}&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Child1.java&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;The next snippet shows the Child1 class, we have also annotated the class to encode type but we do not need to define any sub-types. The class has two fields, one of which is annotated to be a JsonProperty and the other is marked to be ignored.&amp;lt;/p&amp;gt;

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonIgnore;

@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property=&amp;quot;objectType&amp;quot;)
public class Child1 extends ParentClass {

	@JsonProperty
	public int SerializeMe;

	@JsonIgnore
	public int dontSerialize me;

}&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Child2.java&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
Child2 is very similar except for a few differences which highlight some of the features of Jackson, first we are able serialize more complex types such as the ArrayList of type string and second, we are also able to annotate Java Bean style getters to return a JSON property even if they have no member variable to back them.
&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.annotate.JsonTypeInfo;
import java.util.List;

@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property=&amp;quot;objectType&amp;quot;)
public class Child2 extends ParentClass {

	@JsonProperty
	public List SerializeMe;

	@JsonProperty
	public int getSerializeMeToo() {
		return 53;
	}

	@JsonProperty
	public void setSerializeMeToo(int value) {
		//Do nothing
	}

}&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Driver.java&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Finally lets create a driver class to test our serialization and deserialization. For this we use the &amp;lt;strong&amp;gt;ObjectMapper&amp;lt;/strong&amp;gt; class which has a &amp;lt;strong&amp;gt;writeValueAsString&amp;lt;/strong&amp;gt; method. We just pass an annotated class to ObjectMapper&amp;apos;s writeValueAsString method and get an encoded JSON string. Similarly we can use the &amp;lt;strong&amp;gt;readValue&amp;lt;/strong&amp;gt; method to deserialize JSON back to a java object. As the code below shows we pass the string representation of JSON as well as an Ancestor of the object we are deserializing. Notice how we pass &amp;lt;strong&amp;gt;ParentClass&amp;lt;/strong&amp;gt; to the readValue method but when print the clss type out you will see it outputs &amp;quot;Child1&amp;quot; and &amp;quot;Child2&amp;quot; correctly.
&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;import org.codehaus.jackson.map.ObjectMapper;
import java.util.Arrays;

public class Driver {
	public static void main(String[] args) {

		try {
			ObjectMapper oMapper = new ObjectMapper();

			Child1 child1 = new Child1();
			child1.SerializeMe = 10;
			child1.dontSerializeMe = 12;
			Child2 child2 = new Child2();

			child2.SerializeMe = Arrays.asList(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;);

			String outputChild1 = oMapper.writeValueAsString(child1);
			String outputChild2 = oMapper.writeValueAsString(child2);

			System.out.println(outputChild1);
			System.out.println(outputChild2);

			ParentClass inputChild1 = oMapper.readValue(outputChild1, ParentClass.class);
			ParentClass inputChild2 = oMapper.readValue(outputChild2, ParentClass.class);

			System.out.println(inputChild1.getClass().toString());
			System.out.println(inputChild2.getClass().toString());
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}
}&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;Compiling and running the code&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To compile the code fireup a terminal or the command line and enter the following command:
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;javac -classpath jackson-all-1.8.4.jar:./ *.java&amp;lt;/pre&amp;gt;
To run the code run the following command:
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;java -classpath jackson-all-1.8.4.jar:./ Driver&amp;lt;/pre&amp;gt;
Your output should be something like:
&amp;lt;pre lang=&amp;quot;json&amp;quot;&amp;gt;{&amp;quot;objectType&amp;quot;:&amp;quot;Child1&amp;quot;,&amp;quot;SerializeMe&amp;quot;:10}
{&amp;quot;objectType&amp;quot;:&amp;quot;Child2&amp;quot;,&amp;quot;SerializeMe&amp;quot;:[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;],&amp;quot;serializeMeToo&amp;quot;:53}
class Child1
class Child2&amp;lt;/pre&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Notice the fact that the class name is added as a property to the output JSON, and how the dontSerializeMe feild of Child1 is ignored. Also note that the types of the objects generated from JSON are Child1 and Child2 respectively even though we told the mapper we were looking for a &amp;lt;strong&amp;gt;ParentClass&amp;lt;/strong&amp;gt; type.
&amp;lt;h3&amp;gt;Source Code&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The source code shown here can be &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/07/jackson_serialization.zip&amp;quot;&amp;gt;Downloaded Here&amp;lt;/a&amp;gt;
Note that all code and other source provided here are licensed under the BSD License available &amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/11/Licensing.txt&amp;apos;&amp;gt;Here&amp;lt;/a&amp;gt;. 

&amp;lt;h3&amp;gt;Further Reading&amp;lt;/h3&amp;gt;
&amp;lt;a href=&amp;quot;http://www.json.org/&amp;quot;&amp;gt;JSON&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/Download&amp;quot;&amp;gt;Jackson&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;http://jackson.codehaus.org/Tutorial&amp;quot;&amp;gt;Jackson Tutorials&amp;lt;/a&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Setting up a webservice using Guice & Sitebricks</title>
   <link href="http://username.github.com/2011/06/25/five-minute-guide-to-setting-up-a-java-webserver"/>
   <updated>2011-06-25T19:11:41-04:00</updated>
   <id>http://username.github.com/2011/06/25/five-minute-guide-to-setting-up-a-java-webserver</id>
   <content type="html">&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
This is a tutorial for java developers with some background in web technologies who want to learn how to bring up a web server. For this tutorial we will be using the &amp;lt;a href=&amp;quot;http://jetty.codehaus.org/jetty/&amp;quot;&amp;gt;Jetty 7&amp;lt;/a&amp;gt; servlet container. The Jetty webserver is implemented entirely in java, hence can be easily embedded into Java applications. Furthermore, it is well supported by all of the common Java IDEs such as eclipse and supports most modern webserver technologies.  
&amp;lt;!--more--&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To write our user interface we will be using the &amp;lt;a href=&amp;quot;https://github.com/dhanji/sitebricks&amp;quot;&amp;gt;Sitebricks&amp;lt;/a&amp;gt; framework from google. Sitebricks is somewhat similar to JSPs in that it allows you to integrate java code seamlessly with html front-ends. However, sitebricks is much easier to setup and use then JSPs. In addition sitebricks tend to be a lot less verbose than JSPs. 

We will be using the &amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/&amp;quot;&amp;gt;Guice 3&amp;lt;/a&amp;gt; (pronounced &amp;quot;Juice&amp;quot;) injection framework to make the code much cleaner and simpler. Guice allows us to generate a lot of functionality using annotations instead of writing code ourselves.  

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
To tie everything together we will be using &amp;lt;a href=&amp;quot;http://maven.apache.org/download.html&amp;quot;&amp;gt;Maven3&amp;lt;/a&amp;gt;, which will manage all our dependencies as well as our build. That was a lot of technologies all at once and can sound scary if you are not familiar with them. Don&amp;apos;t worry I will walk you through the process of integrating them. In addition you can download the &amp;lt;a href=&amp;quot;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld.zip&amp;quot;&amp;gt;Sample Project&amp;lt;/a&amp;gt; source code here and see the project running. 
&amp;amp;nbsp;

&amp;lt;h3&amp;gt;Tools of the trade&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Lets get started, first download and install Java if you don&amp;apos;t have it installed already. You can download the latest Java SDK &amp;lt;a href=&amp;quot;http://www.java.com/en/download&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. Once you have java installed please download and install Maven 3 from &amp;lt;a href=&amp;quot;http://maven.apache.org/download.html&amp;quot;&amp;gt;http://maven.apache.org/download.html&amp;lt;/a&amp;gt;. You will find installation instructions on that page. You can verify that the installation was successful by opening a command line terminal and entering the mvn -version command. We now have everything we need to setup a web server.
&amp;lt;/p&amp;gt;
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;mvn -version
Apache Maven 3.0.2 (r1056850; 2011-01-08 19:58:10-0500)
Java version: 1.6.0_24, vendor: Apple Inc.
Java home: /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
Default locale: en_US, platform encoding: MacRoman
OS name: &amp;quot;mac os x&amp;quot;, version: &amp;quot;10.6.8&amp;quot;, arch: &amp;quot;x86_64&amp;quot;, family: &amp;quot;mac&amp;quot;&amp;lt;/pre&amp;gt;

&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Here&amp;apos;s one I made earlier&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
If you would like to see the Web server we will be creating in action please download the source here:&amp;lt;a href=&amp;apos;http://www.techtraits.ca/wp-content/uploads/2011/06/helloworld1.zip&amp;apos;&amp;gt;HelloWorld.zp&amp;lt;/a&amp;gt;. Unzip this project and browse to the helloworld directory in your command line  terminal, run the following command and skip to step 10.
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
mvn clean install
mvn jetty:run-exploded
&amp;lt;/pre&amp;gt;

&amp;amp;nbsp;
&amp;lt;h3 style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;Step 1: Creating the maven project&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The first step is to create our maven pom.xml file. Maven is an automation framework which will manage our dependencies, compilation and deployment and a whole host of other tasks. Although it is possible to create the pom file from scratch we can leverage pre-built  templates (called archetypes) create our project pom.xml file. We can setup a web project using the maven webapp archetype. Open up a terminal window (or command prompt if you are on windows) and cd to directory where you would like to create your project and enter the following command. 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;mvn archetype:generate \
  -DgroupId=com.flybynight.helloworld \
  -DartifactId=helloworld \
  -DarchetypeArtifactId=maven-archetype-webapp  \
  -DarchetypeGroupId=org.apache.maven.archetypes \
  -Dversion=1.0-SNAPSHOT&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In this command we are specifying the location of location of our project in the maven project namespace with the &amp;quot;&amp;lt;strong&amp;gt;groupId&amp;lt;/strong&amp;gt;&amp;quot; parameter. It is standard to use the inverse of your web domain as your group id.  for example if you work on a project called helloworld for a company called flybynight  which is hosted at www.helloworld.flybynight.com, you might use com.flybynight.helloworld as your group id. The &amp;quot;&amp;lt;strong&amp;gt;artifactId&amp;lt;/strong&amp;gt;&amp;quot; parameter is a unique identifier for your project e.g. helloworld. The &amp;quot;&amp;lt;strong&amp;gt;archetypeArtifactId&amp;lt;/strong&amp;gt;&amp;quot; and &amp;quot;&amp;lt;strong&amp;gt;archetypeGroupId&amp;lt;/strong&amp;gt;&amp;quot; tell maven that you want to create an application using the &amp;quot;&amp;lt;strong&amp;gt;maven-archetype-webapp&amp;lt;/strong&amp;gt;&amp;quot; template which can be found in the &amp;quot;&amp;lt;strong&amp;gt;org.apache.maven.archetypes&amp;lt;/strong&amp;gt;&amp;quot; group.&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
After running this command you will see a lot of console output which is generated by maven downloading everything it needs to build your project. Eventually you should get the build success message shown below. You should now have a helloworld sub-directory in the current directory which contains a file &amp;lt;strong&amp;gt;pom.xml&amp;lt;/strong&amp;gt; and a directory &amp;lt;strong&amp;gt;src&amp;lt;/strong&amp;gt;. 
&amp;lt;/p&amp;gt;
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.977s
[INFO] Finished at: Sat Jun 25 16:38:48 EDT 2011
[INFO] Final Memory: 7M/81M
[INFO] ------------------------------------------------------------------------&amp;lt;/pre&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 2: Settings up the compiler&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
The first thing we want to tell maven is where we will put our source files which we will do using the pom file. The pom file (helloworld/pom.xml) is the mission control of your maven application, it contains all settings, dependencies and deployment details. Open the pom file in a text editor of your choice and look for the &amp;lt;strong&amp;gt;&amp;amp;lt;build&amp;amp;gt;&amp;lt;/strong&amp;gt; element and add the sourceDirectory element. There are many other settings you can update in the pom (&amp;lt;a href=&amp;quot;http://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Super_POM&amp;quot;&amp;gt;Details&amp;lt;/a&amp;gt;) but for now we will not edit them.

&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt;
&amp;lt;/pre&amp;gt;

&amp;lt;h3&amp;gt;Step 3: Settings up the Jetty&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Next we need to tell maven that we will be using the Jetty webserver to host our content using the jetty plugin. 
We do that by adding a plugin tag with details of the jetty plugin in within the same build tag where put our source directory setting. A plugin definition for the current latest jetty plugin looks something like this:
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;plugins&amp;gt;
	&amp;lt;plugin&amp;gt;
		&amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;jetty-maven-plugin&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;7.4.2.v20110526&amp;lt;/version&amp;gt;
	&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 4: Settings up the Jetty&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
We have now setup the framework to build and deploy our web server but we still need to include the Guice and Sitebricks libraries. Look for the &amp;lt;strong&amp;gt;&amp;amp;lt;dependencies&amp;amp;gt;&amp;lt;/strong&amp;gt; element which tells maven what are the dependencies of our project. We depend on guice, sitebricks and also http components so we add the following dependencies. Maven will download and setup these for us and add them to the class path. &amp;lt;/p&amp;gt;
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.google.inject&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;guice&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;3.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;com.google.sitebricks&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;sitebricks&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;0.8.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.1.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 5: Hooking up Guice&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now we must tell our application that we will be using Guice to intercept all http requests and manage all our content using google magic. For this open up the &amp;lt;strong&amp;gt;web.xml&amp;lt;/strong&amp;gt; file (./src/main/webapp/WEB-INF/web.xml). In the &amp;lt;strong&amp;gt;&amp;amp;lt;web-app&amp;amp;gt; &amp;lt;/strong&amp;gt;xml element add the code shown below. This creates a filter called &amp;lt;strong&amp;gt;webfilter&amp;lt;/strong&amp;gt; which points to the google provided GuiceFilter class. We map the filter to &amp;quot;/*&amp;quot; which means all requests will go through guice. Lastly we tell guice to use the &amp;lt;strong&amp;gt;GuiceCreator&amp;lt;/strong&amp;gt; class to figure out what to do with requests by setting the listener element to the fully qualified name of this class. In the nest section we will see how to implement this class so stay tuned. 
&amp;lt;/p&amp;gt;
&amp;lt;pre lang=&amp;quot;xml&amp;quot;&amp;gt;
&amp;lt;filter&amp;gt;
    &amp;lt;filter-name&amp;gt;webFilter&amp;lt;/filter-name&amp;gt;
        &amp;lt;filter-class&amp;gt;com.google.inject.servlet.GuiceFilter&amp;lt;/filter-class&amp;gt;
    &amp;lt;/filter&amp;gt;

&amp;lt;filter-mapping&amp;gt;
    &amp;lt;filter-name&amp;gt;webFilter&amp;lt;/filter-name&amp;gt;
    &amp;lt;url-pattern&amp;gt;/*&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/filter-mapping&amp;gt;

&amp;lt;listener&amp;gt;
    &amp;lt;listener-class&amp;gt;com.flybynight.helloworld.GuiceCreator&amp;lt;/listener-class&amp;gt;
&amp;lt;/listener&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 6: Creating the Html Content&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now lets create the html front end for our sitebrick; all files that are to be deployed to our web server live in the src/main/webapp/ directory so we will create a HelloWorld.html file in there and add the following code. This has two components the &amp;quot;@ShowIf&amp;quot; annotation which tells sitebricks to show the following html element if a condition is met. We are setting the condition to always be true. Second we specify that we are looking for a message parameter from our sitebrick using the &amp;quot;&amp;lt;strong&amp;gt;${message}&amp;lt;/strong&amp;gt;&amp;quot; tag. When serving the html page the sitebricks framework will parse the html and look for these tags. It will then query the corresponding brick for the value of this tag, e.g. for the message tag in HelloWorld.html sitebricks will call the &amp;lt;strong&amp;gt;getMessage&amp;lt;/strong&amp;gt; method on the HelloWorld java class. Note that the naming is important because sitebricks uses case sensitive naming to match html files with their respective java classes. 

&amp;lt;pre lang=&amp;quot;html&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    @ShowIf(true)
    &amp;lt;p&amp;gt;${message} from Sitebricks!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 7: Creating the sitebrick&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
Now lets create the bick which provides the definition of the message tag in our Html code. I am using the &amp;lt;strong&amp;gt;com.flybynight.helloworld.sitebricks&amp;lt;/strong&amp;gt; package for our sitebricks call so we will create a directory for the java file to live in. 

&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
mkdir -p src/main/java/com/flybynight/helloworld/sitebricks/
&amp;lt;/pre&amp;gt;

&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In that directory we will create the &amp;lt;strong&amp;gt;HelloWorld.java&amp;lt;/strong&amp;gt; class, the code for which is shown below.  Note the &amp;quot;&amp;lt;strong&amp;gt;@At&amp;lt;/strong&amp;gt;&amp;quot; annotation tells guice that this sitebrick should be served when the http request is for the &amp;quot;&amp;lt;strong&amp;gt;http://yourhostname/helloworld&amp;lt;/strong&amp;gt;&amp;quot; url. The &amp;quot;&amp;lt;strong&amp;gt;getMessage&amp;lt;/strong&amp;gt;&amp;quot; method is called by sitebrick to resolve the message parameter that we specified in the html as I mentioned earlier. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld.sitebricks;

import com.google.inject.Inject;
import com.google.inject.name.Named;
import com.google.sitebricks.At;

@At(&amp;quot;/helloworld&amp;quot;)
public class HelloWorld {	
    public String getMessage() { 
    	return &amp;quot;Message&amp;quot;;		
	}
}

&amp;lt;/pre&amp;gt;
&amp;lt;/p&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 8: Injecting a named proerpty&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
I would like to highlight the injection capabilities of Guice here; in your class create a property called messageString and annotate it with the &amp;lt;strong&amp;gt;Inject&amp;lt;/strong&amp;gt; and &amp;lt;strong&amp;gt;named&amp;lt;/strong&amp;gt; annotations. The named annotation takes a tag name as input, which is used to look up the value of the property. There are many other types of injection available See the &amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/wiki/Injections&amp;quot;&amp;gt;Guice Manual&amp;lt;/a&amp;gt;. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld.sitebricks;

import com.google.inject.Inject;
import com.google.inject.name.Named;
import com.google.sitebricks.At;

@At(&amp;quot;/helloworld&amp;quot;)
public class HelloWorld {
	
	@Inject
	@Named(&amp;quot;message&amp;quot;)
	String messageString;
	
    public String getMessage() { 
    	return this.messageString;		
	}
}

&amp;lt;/pre&amp;gt;
&amp;lt;/p&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Step 9: Configuring Guice Injection&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
In the &amp;lt;strong&amp;gt;src/main/java/com/flybynight/helloworld&amp;lt;/strong&amp;gt; directory create a java file GuiceCreator.java and add the code shown below. The code tells Guice that we will be using sitebricks to host our content and that our sitebricks live in the package which contains the &amp;lt;strong&amp;gt;HelloWorld&amp;lt;/strong&amp;gt; class. The scan call is telling Guice to &amp;quot;&amp;quot;scan&amp;quot; the classes in that package and look for the &amp;lt;Strong&amp;gt;@At&amp;lt;/Strong&amp;gt; annotations to identify the brick classes. In addition we are providing the value of the property named &amp;lt;Strong&amp;gt;&amp;quot;message&amp;quot;&amp;lt;/Strong&amp;gt; using the &amp;lt;Strong&amp;gt;bindConstant&amp;lt;/Strong&amp;gt; method. 

&amp;lt;pre lang=&amp;quot;java&amp;quot;&amp;gt;
package com.flybynight.helloworld;

import com.flybynight.helloworld.sitebricks.HelloWorld;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.name.Names;
import com.google.inject.servlet.GuiceServletContextListener;
import com.google.inject.servlet.ServletModule;
import com.google.sitebricks.SitebricksModule;

public class GuiceCreator extends GuiceServletContextListener {

	@Override
	protected Injector getInjector() {
		Injector injector = Guice.createInjector ( 
				new SitebricksModule() {
			         protected void configureSitebricks() {
			                // scan class Example&amp;apos;s package and all descendants
			                scan(HelloWorld.class.getPackage());
			                //Injection value of message
			                bindConstant().annotatedWith(Names.named(&amp;quot;message&amp;quot;)).to(&amp;quot;HelloWorld!!&amp;quot;);
			            }
				}
		);
		return injector;
	}

}


&amp;lt;/pre&amp;gt;
&amp;lt;/p&amp;gt;

&amp;amp;nbsp;

&amp;lt;h3&amp;gt;Step 10: All done now lets run it&amp;lt;/h3&amp;gt;
&amp;lt;p style=&amp;quot;text-align: justify;&amp;quot;&amp;gt;
And were are done, now we just compile everything, make sure the current directory is set to the one which contains the pom.xml file and run: 
&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;mvn clean install&amp;lt;/pre&amp;gt;
You will see a lot of console output regarding maven downloading dependencies and then eventually a build successful message. 

&amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.318s
[INFO] Finished at: Sat Jun 25 18:30:53 EDT 2011
[INFO] Final Memory: 11M/81M
[INFO] ------------------------------------------------------------------------
&amp;lt;/pre&amp;gt;

Now tell maven to run the webserver using the jetty plugin we configured earlier: &amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;mvn jetty:run-exploded&amp;lt;/pre&amp;gt; You should see more maven console output followed by &amp;lt;pre lang=&amp;quot;bash&amp;quot;&amp;gt;[INFO] Started Jetty Server&amp;lt;/pre&amp;gt; which means your server is running. Fireup a browser and hit &amp;lt;a href=&amp;quot;http://localhost:8080/helloworld&amp;quot;&amp;gt;http://localhost:8080/helloworld&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;
&amp;amp;nbsp;
&amp;lt;h3&amp;gt;Further Reading&amp;lt;/h3&amp;gt;
If you have any problems leave a comment and I can update the article and if you would like for details of what we just did here you can read up on &amp;lt;a href=&amp;quot;http://code.google.com/p/google-sitebricks/wiki/GettingStarted&amp;quot;&amp;gt;Sitebricks&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;http://code.google.com/p/google-guice/wiki/GettingStarted&amp;quot;&amp;gt;Guice&amp;lt;/a&amp;gt;, &amp;lt;a href=&amp;quot;http://jetty.codehaus.org/jetty/&amp;quot;&amp;gt;Jetty&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;http://maven.apache.org/ref/3.0/&amp;quot;&amp;gt;Maven&amp;lt;/a&amp;gt;. &lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>IPhone SDK Hello World</title>
   <link href="http://username.github.com/2011/06/12/iphone-sdk-hello-world"/>
   <updated>2011-06-12T14:44:32-04:00</updated>
   <id>http://username.github.com/2011/06/12/iphone-sdk-hello-world</id>
   <content type="html">&lt;hr /&gt;&lt;p style='text-align: justify;'&gt;This is a tutorial for beginners to the IPhone SDK and includes instructions on creating a basic HelloWorld program. The program demonstrates the use of Views, Labels and UIButtons. I will be using the 4.3 SDK so some features may not be available in the earlier version.&lt;/p&gt;&lt;!--more--&gt;&lt;h3 style='text-align: justify;'&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/06/projecttype.png'&gt;&lt;img alt='' class='alignright size-full wp-image-84' height='340' src='http://www.techtraits.ca/wp-content/uploads/2011/06/projecttype.png' title='projecttype' width='500' /&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3&gt;Source Code&lt;/h3&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/06/HelloWorld.zip'&gt;HelloWorld Source Project&lt;/a&gt;&lt;p style='text-align: justify;' /&gt;&lt;h3 style='text-align: justify;'&gt;Step 1: Download XCode and the SDK&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;The first thing we need to do is to download the development tools namely &lt;a href='http://developer.apple.com/tools/xcode/'&gt;XCode&lt;/a&gt; and the &lt;a href='http://developer.apple.com/devcenter/ios'&gt;SDK&lt;/a&gt;. To download either of these you will need to register for the Apple ID and Apple developer Connection (ADC). Install both these tools, the procedure to do so is fairly trivial so I am not going into details.&lt;/p&gt;&lt;h3 style='text-align: justify;'&gt;Step 2: Create a new Project&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;Now we have the tools we need to start coding but before we do we need to create a new project. &lt;strong&gt;Select File &amp;gt; New Project&lt;/strong&gt; or &lt;strong&gt;Apple Key + Shift + N&lt;/strong&gt; to bring up the new project menu. Select the &lt;strong&gt;Applications &lt;/strong&gt;item of the &lt;strong&gt;IPhone OS&lt;/strong&gt; section from the menu on the left, and select &lt;strong&gt;View Based Application &lt;/strong&gt;from the icons on the right. When prompted enter a project name, I have used HelloWorld in the sample code.&lt;/p&gt;&lt;p style='text-align: justify;' /&gt;&lt;h3&gt;Step: 3 Update the settings&lt;/h3&gt;&lt;p style='text-align: justify;'&gt;Once you compete the wizard creates the project you will be taken to the main settings page. Here you can setup the device orientation settings and the application icon. (By dragging a properly sized png file into the correct box).&lt;/p&gt;&lt;p style='text-align: justify;'&gt;When you create a project you will see a window similar to the one shown in the image on the right. There are four source files in the&lt;strong&gt; &lt;/strong&gt;package; &lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/06/menu.png'&gt;&lt;img alt='' class='alignright size-full wp-image-88' height='239' src='http://www.techtraits.ca/wp-content/uploads/2011/06/menu.png' title='menu' width='260' /&gt;&lt;/a&gt;
HelloWorldAppDelegate.h
HelloWorldAppDelegate.m
HelloWorldViewController.h
HelloWorldViewController.m&lt;/p&gt;
&lt;p&gt;I am ignoring the xib files for now because for this tutorial I will be adding the interface elements directly and not through the interface builder. I would like to highlight some important parts of the auto-generated code so open the HelloWorldAppDelegate.h file and note that it contains a reference to a UIWindow object (Line 17) which controls all the user interaction for this application and will manage all other interface components. It also contains a reference to HelloWorldViewController (Line 19) which we will see later manages our one sample view.&lt;/p&gt;

&lt;p&gt;In the source file for the application delegate (HelloWorldAppDelegate.m) we find an auto generated &lt;strong&gt;applicationDidFinishLaunching&lt;/strong&gt; method. This, as the name suggests, invoked when the application has been loaded and in this method we will add our HelloWorldViewController object to the UIWindow and make it visible. &lt;pre lang='objc'&gt;self.window.rootViewController = self.viewController;
[self.window makeKeyAndVisible];&lt;/pre&gt; The IPhone SDK UI follows the &lt;a href='http://en.wikipedia.org/wiki/Model-view-controller'&gt;Model View Controller (MVC)&lt;/a&gt; design pattern and hence each &lt;em&gt;view &lt;/em&gt;has a corrsponding View Controller Object. XCode has automatically created a view for us, (its defined in the HelloWorldViewController.xib file you can see it by double clicking it in the side menu) and linked it to HelloWorldViewController. We now need to add controls to the view handle the generated events. Note we can add controls via a GUI interface called the Interface Builder but I am using the programmatic way for this tutorial.&lt;/p&gt;
&lt;a name='Step_3(3A)_Adding_Controls_and_Handler_to_header_file' /&gt;&lt;h3&gt;Step 3: Adding Controls and Handler to header file&lt;/h3&gt;
&lt;p&gt;Open the HelloWorldViewController.h file and add declarations for a button, a label and a view within the curly braces delimiting the HelloWorldViewController interface declaration add the following lines. &lt;pre lang='objc'&gt;IBOutlet UIButton *button;
IBOutlet UILabel *label;
IBOutlet UIView *myView;&lt;/pre&gt; We are defining a view to display a button and label to go in the view. After the curly braces add a method declaration to accept the click event of the button and also properties to access the  UI elements; myButton, myLabel and myView. Also add properties for these  Your entire code should look something like this: &lt;h3&gt;&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/06/mainsettings.png'&gt;&lt;img alt='' class='alignright size-full wp-image-85' height='730' src='http://www.techtraits.ca/wp-content/uploads/2011/06/mainsettings.png' title='mainsettings' width='531' /&gt;&lt;/a&gt;&lt;/h3&gt; &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;//
//  HelloWorldViewController.h
//  HelloWorld
//&lt;/pre&gt;&lt;/p&gt;

&lt;h1 id='import_'&gt;import &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/pre&gt;&lt;/h1&gt;

&lt;p&gt;IBOutlet UIButton &lt;em&gt;button; IBOutlet UILabel&lt;/em&gt;label; IBOutlet UIView &lt;em&gt;myView;    } -(IBAction)handleEvent:(id)sender; @property (nonatomic, retain) IBOutlet UIButton&lt;/em&gt;button; @property (nonatomic, retain) IBOutlet UILabel &lt;em&gt;label; @property (nonatomic, retain) IBOutlet UIView&lt;/em&gt;myView;&lt;/p&gt;
&lt;h3&gt;Step 4: Adding Controls&lt;/h3&gt;
&lt;p&gt;Add a &lt;strong&gt;synthesize&lt;/strong&gt; call for each of the three UI elements to create the getter and setters after the @implementation HelloWorldViewController line in the HelloWorldViewController.m file as shown below. &lt;pre lang='objc'&gt;@synthesize button;
@synthesize label;
@synthesize myView;&lt;/pre&gt; Now find the comment saying &amp;#8220;Implement loadView if you want to create a view hierarchy programmatically.&amp;#8221; and un-comment the loadView method that follows this line. Add the following lines to the method to create a button and label; &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;objc&amp;quot;&amp;gt;@synthesize button;
- (void)loadView
{
    // create and configure the view
    CGRect cgRct = CGRectMake(0.0, 0.0, 480, 320); //define size and position of view
    myView = [[UIView alloc] initWithFrame:cgRct]; //initialize the view
    myView.autoresizesSubviews = YES;              //allow it to tweak size of elements in view
    self.view = myView;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// create a UIButton (UIButtonTypeRoundedRect) and play arround with settings
button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
button.frame = CGRectMake(100, 100, 100, 50); // size and position of button
[button setTitle:@&amp;quot;Add&amp;quot; forState:UIControlStateNormal];
button.backgroundColor = [UIColor clearColor];
button.adjustsImageWhenHighlighted = YES;

//Add action handler and set current class as target
[button addTarget:self action:@selector(action:) forControlEvents:UIControlEventTouchUpInside];

//Display Button
[self.view addSubview:button];

//create a label
cgRct = CGRectMake(100, 170, 100, 50); //define size and position of label
label = [[UILabel alloc] initWithFrame:cgRct];
label.text = @&amp;quot;Hello World&amp;quot;;

//Display Label
[self.view addSubview:label];&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&amp;lt;/pre&amp;gt; Click the &lt;strong&gt;Run&lt;/strong&gt; button to check your interface is drawn correctly It should look something like to screen shot below.&lt;/p&gt;
&lt;a href='http://www.techtraits.ca/wp-content/uploads/2011/06/button.png'&gt;&lt;img alt='' class='alignleft size-full wp-image-98' height='73' src='http://www.techtraits.ca/wp-content/uploads/2011/06/button.png' title='button' width='264' /&gt;&lt;/a&gt;
&lt;p&gt;&amp;#160; &lt;h3&gt;Step 5: Handling Actions&lt;/h3&gt; We have already told the button to send an event (action) to the current class (self) in case of an &lt;strong&gt;UIControlEventTouchUpInside &lt;/strong&gt;event but there is no handler defined to accept the event. We define a handler method in the class by adding the method shown below. It is doing two things, changing the text property of the label and adding a message to the log file. &lt;pre lang='objc'&gt;-(void)action:(id)sender
{
    NSLog(@&quot;UIButton was clicked&quot;);
    label.text = @&quot;Bye World&quot;;
}&lt;/pre&gt; Now click the Build and Go button again and click the button. The text of the label should change.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>IPhone SDK Hello World</title>
   <link href="http://username.github.com/2011/06/12/iphone-sdk-hello-world"/>
   <updated>2011-06-12T00:00:00-04:00</updated>
   <id>http://username.github.com/2011/06/12/iphone-sdk-hello-world</id>
   <content type="html">&lt;hr /&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;This is a tutorial for beginners to the IPhone SDK and includes instructions on creating a basic HelloWorld program. The program demonstrates the use of Views, Labels and UIButtons. I will be using the 4.3 SDK so some features may not be available in the earlier version.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/projecttype.png&quot;&gt;&lt;img class=&quot;alignright size-full wp-image-84&quot; title=&quot;projecttype&quot; src=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/projecttype.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;340&quot; /&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;Source Code&lt;/h3&gt;
&lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/HelloWorld.zip&quot;&gt;HelloWorld Source Project&lt;/a&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;Step 1: Download XCode and the SDK&lt;/h3&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The first thing we need to do is to download the development tools namely &lt;a href=&quot;http://developer.apple.com/tools/xcode/&quot;&gt;XCode&lt;/a&gt; and the &lt;a href=&quot;http://developer.apple.com/devcenter/ios&quot;&gt;SDK&lt;/a&gt;. To download either of these you will need to register for the Apple ID and Apple developer Connection (ADC). Install both these tools, the procedure to do so is fairly trivial so I am not going into details.&lt;/p&gt;

&lt;h3 style=&quot;text-align: justify;&quot;&gt;Step 2: Create a new Project&lt;/h3&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Now we have the tools we need to start coding but before we do we need to create a new project. &lt;strong&gt;Select File &amp;gt; New Project&lt;/strong&gt; or &lt;strong&gt;Apple Key + Shift + N&lt;/strong&gt; to bring up the new project menu. Select the &lt;strong&gt;Applications &lt;/strong&gt;item of the &lt;strong&gt;IPhone OS&lt;/strong&gt; section from the menu on the left, and select &lt;strong&gt;View Based Application &lt;/strong&gt;from the icons on the right. When prompted enter a project name, I have used HelloWorld in the sample code.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Step: 3 Update the settings&lt;/h3&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Once you compete the wizard creates the project you will be taken to the main settings page. Here you can setup the device orientation settings and the application icon. (By dragging a properly sized png file into the correct box).&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;When you create a project you will see a window similar to the one shown in the image on the right. There are four source files in the&lt;strong&gt; &lt;/strong&gt;package; &lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/menu.png&quot;&gt;&lt;img class=&quot;alignright size-full wp-image-88&quot; title=&quot;menu&quot; src=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/menu.png&quot; alt=&quot;&quot; width=&quot;260&quot; height=&quot;239&quot; /&gt;&lt;/a&gt;
HelloWorldAppDelegate.h
HelloWorldAppDelegate.m
HelloWorldViewController.h
HelloWorldViewController.m&lt;/p&gt;
I am ignoring the xib files for now because for this tutorial I will be adding the interface elements directly and not through the interface builder. I would like to highlight some important parts of the auto-generated code so open the HelloWorldAppDelegate.h file and note that it contains a reference to a UIWindow object (Line 17) which controls all the user interaction for this application and will manage all other interface components. It also contains a reference to HelloWorldViewController (Line 19) which we will see later manages our one sample view.

In the source file for the application delegate (HelloWorldAppDelegate.m) we find an auto generated &lt;strong&gt;applicationDidFinishLaunching&lt;/strong&gt; method. This, as the name suggests, invoked when the application has been loaded and in this method we will add our HelloWorldViewController object to the UIWindow and make it visible.
&lt;pre lang=&quot;objc&quot;&gt;self.window.rootViewController = self.viewController;
[self.window makeKeyAndVisible];&lt;/pre&gt;
The IPhone SDK UI follows the &lt;a href=&quot;http://en.wikipedia.org/wiki/Model-view-controller&quot;&gt;Model View Controller (MVC)&lt;/a&gt; design pattern and hence each &lt;em&gt;view &lt;/em&gt;has a corrsponding View Controller Object. XCode has automatically created a view for us, (its defined in the HelloWorldViewController.xib file you can see it by double clicking it in the side menu) and linked it to HelloWorldViewController. We now need to add controls to the view handle the generated events. Note we can add controls via a GUI interface called the Interface Builder but I am using the programmatic way for this tutorial.

&lt;a name=&quot;Step_3(3A)_Adding_Controls_and_Handler_to_header_file&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Step 3: Adding Controls and Handler to header file&lt;/h3&gt;
Open the HelloWorldViewController.h file and add declarations for a button, a label and a view within the curly braces delimiting the HelloWorldViewController interface declaration add the following lines.
&lt;pre lang=&quot;objc&quot;&gt;IBOutlet UIButton *button;
IBOutlet UILabel *label;
IBOutlet UIView *myView;&lt;/pre&gt;
We are defining a view to display a button and label to go in the view. After the curly braces add a method declaration to accept the click event of the button and also properties to access the  UI elements; myButton, myLabel and myView. Also add properties for these  Your entire code should look something like this:
&lt;h3&gt;&lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/mainsettings.png&quot;&gt;&lt;img class=&quot;alignright size-full wp-image-85&quot; title=&quot;mainsettings&quot; src=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/mainsettings.png&quot; alt=&quot;&quot; width=&quot;531&quot; height=&quot;730&quot; /&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;pre lang=&quot;objc&quot;&gt;//
//  HelloWorldViewController.h
//  HelloWorld
//

#import &lt;UIKit/UIKit.h&gt;

@interface HelloWorldViewController : UIViewController {
 IBOutlet UIButton *button;
 IBOutlet UILabel *label;
 IBOutlet UIView *myView;   
}
 -(IBAction)handleEvent:(id)sender;
@property (nonatomic, retain) IBOutlet UIButton *button;
@property (nonatomic, retain) IBOutlet UILabel *label;
@property (nonatomic, retain) IBOutlet UIView *myView;

@end&lt;/pre&gt;
&lt;h3&gt;Step 4: Adding Controls&lt;/h3&gt;
Add a &lt;strong&gt;synthesize&lt;/strong&gt; call for each of the three UI elements to create the getter and setters after the @implementation HelloWorldViewController line in the HelloWorldViewController.m file as shown below.
&lt;pre lang=&quot;objc&quot;&gt;@synthesize button;
@synthesize label;
@synthesize myView;&lt;/pre&gt;
Now find the comment saying &quot;Implement loadView if you want to create a view hierarchy programmatically.&quot; and un-comment the loadView method that follows this line. Add the following lines to the method to create a button and label;
&lt;pre lang=&quot;objc&quot;&gt;@synthesize button;
- (void)loadView
{
    // create and configure the view
    CGRect cgRct = CGRectMake(0.0, 0.0, 480, 320); //define size and position of view
    myView = [[UIView alloc] initWithFrame:cgRct]; //initialize the view
    myView.autoresizesSubviews = YES;              //allow it to tweak size of elements in view
    self.view = myView;

    // create a UIButton (UIButtonTypeRoundedRect) and play arround with settings
    button = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    button.frame = CGRectMake(100, 100, 100, 50); // size and position of button
    [button setTitle:@&quot;Add&quot; forState:UIControlStateNormal];
    button.backgroundColor = [UIColor clearColor];
    button.adjustsImageWhenHighlighted = YES;

    //Add action handler and set current class as target
    [button addTarget:self action:@selector(action:) forControlEvents:UIControlEventTouchUpInside];

    //Display Button
    [self.view addSubview:button];

    //create a label
    cgRct = CGRectMake(100, 170, 100, 50); //define size and position of label
    label = [[UILabel alloc] initWithFrame:cgRct];
    label.text = @&quot;Hello World&quot;;

    //Display Label
    [self.view addSubview:label];
}&lt;/pre&gt;
Click the &lt;strong&gt;Run&lt;/strong&gt; button to check your interface is drawn correctly It should look something like to screen shot below.

&lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/button.png&quot;&gt;&lt;img class=&quot;alignleft size-full wp-image-98&quot; title=&quot;button&quot; src=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/button.png&quot; alt=&quot;&quot; width=&quot;264&quot; height=&quot;73&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/phone.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-99&quot; title=&quot;phone&quot; src=&quot;http://www.techtraits.ca/wp-content/uploads/2011/06/phone-163x300.png&quot; alt=&quot;&quot; width=&quot;195&quot; height=&quot;358&quot; /&gt;&lt;/a&gt;

&amp;nbsp;
&lt;h3&gt;Step 5: Handling Actions&lt;/h3&gt;
We have already told the button to send an event (action) to the current class (self) in case of an &lt;strong&gt;UIControlEventTouchUpInside &lt;/strong&gt;event but there is no handler defined to accept the event. We define a handler method in the class by adding the method shown below. It is doing two things, changing the text property of the label and adding a message to the log file.
&lt;pre lang=&quot;objc&quot;&gt;-(void)action:(id)sender
{
    NSLog(@&quot;UIButton was clicked&quot;);
    label.text = @&quot;Bye World&quot;;
}&lt;/pre&gt;
Now click the Build and Go button again and click the button. The text of the label should change.
</content>
 </entry>
 
 <entry>
   <title>Records in erlang</title>
   <link href="http://username.github.com/2011/06/11/records-in-erlang"/>
   <updated>2011-06-11T19:49:10-04:00</updated>
   <id>http://username.github.com/2011/06/11/records-in-erlang</id>
   <content type="html">&lt;hr /&gt;
&lt;p&gt;When learning a new language its always difficult to google the meaning of operators. I ran into this problem when reading erlang source and trying to figure out what the hash sign does. Searching for &amp;#8220;erlang hash&amp;#8221; would always lead to articles about computing MD5 hashes in erlang. I had to resort to asking the question on stack overflow.So for the sake of the next person who googles this &amp;#8220;What does the hash operator do in erlang?&amp;#8221; &lt;!--more--&gt; &amp;#160; &lt;h3 style='text-align: left;'&gt;Defining Records&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;Record is a compound data type in erlang which gives named access to the elements it contains similar to a struct in c. To use records we must fust define their structure: &lt;pre lang='erlang'&gt;-record(record_name, {element_mame=optional_default_value}).&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;for example: &lt;pre lang='erlang'&gt;-record(car, {model,year,color=blue}).&lt;/pre&gt; &amp;#160; &lt;h3 style='text-align: left;'&gt;Initializing Records&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;To initialize we use the aforementioned hash sign as a prefix to the statement. Notice that I can choose not to supply values for the elements, elements with default values will have those assigned others will remain undefined. &lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre lang=&amp;quot;erlang&amp;quot;&amp;gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green}.&lt;/pre&gt;&lt;/p&gt;
&lt;pre class='markdown-html-error' style='border: solid 3px red; background-color: pink'&gt;REXML could not parse this XML/HTML: 
&amp;lt;/pre&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;#160; &lt;h3&gt;Accessing Records&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;To access records we use our trusty hash operator again and use the element name to retrieve data: &lt;pre lang='erlang'&gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green},
Car1Model = Car1#car.model.&lt;/pre&gt; &amp;#160;&amp;#160; &lt;h3&gt;Updating Records&lt;/h3&gt;&lt;/p&gt;

&lt;p&gt;Updating records is much like initializing except that any elements that we do not specify values for will retain retain previous values. &lt;pre lang='erlang'&gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green},
Car3 = Car2#car{year=2003}.&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160; &lt;h3&gt;Further Reading&lt;/h3&gt;&lt;/p&gt;
&lt;a href='http://www.erlang.org/doc/reference_manual/records.html'&gt;Reference Manual&lt;/a&gt;&lt;a href='http://www.erlang.org/doc/programming_examples/records.html'&gt;Examples&lt;/a&gt;
&lt;p&gt;&amp;#160; &amp;#160;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Records in erlang</title>
   <link href="http://username.github.com/2011/06/11/records-in-erlang"/>
   <updated>2011-06-11T00:00:00-04:00</updated>
   <id>http://username.github.com/2011/06/11/records-in-erlang</id>
   <content type="html">&lt;hr /&gt;

When learning a new language its always difficult to google the meaning of operators. I ran into this problem when reading erlang source and trying to figure out what the hash sign does. Searching for &quot;erlang hash&quot; would always lead to articles about computing MD5 hashes in erlang. I had to resort to asking the question on stack overflow.So for the sake of the next person who googles this &quot;What does the hash operator do in erlang?&quot;
&lt;!--more--&gt;
&amp;nbsp;
&lt;h3 style=&quot;text-align: left;&quot;&gt;Defining Records&lt;/h3&gt;


Record is a compound data type in erlang which gives named access to the elements it contains similar to a struct in c. To use records we must fust define their structure:
&lt;pre lang=&quot;erlang&quot;&gt;-record(record_name, {element_mame=optional_default_value}).

for example:
-record(car, {model,year,color=blue}).

&lt;/pre&gt;
&amp;nbsp;
&lt;h3 style=&quot;text-align: left;&quot;&gt;Initializing Records&lt;/h3&gt;


To initialize we use the aforementioned hash sign as a prefix to the statement. Notice that I can choose not to supply values for the elements, elements with default values will have those assigned others will remain undefined.
&lt;pre lang=&quot;erlang&quot;&gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green}.

&lt;/pre&gt;
&amp;nbsp;
&lt;h3&gt;Accessing Records&lt;/h3&gt;


To access records we use our trusty hash operator again and use the element name to retrieve data:
&lt;pre lang=&quot;erlang&quot;&gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green},
Car1Model = Car1#car.model.&lt;/pre&gt;
&amp;nbsp;&amp;nbsp;
&lt;h3&gt;Updating Records&lt;/h3&gt;



Updating records is much like initializing except that any elements that we do not specify values for will retain retain previous values.
&lt;pre lang=&quot;erlang&quot;&gt;Car1 = #car{model=civic,year=2007,color=green},
Car2 = #car{model=mazda,color=green},
Car3 = Car2#car{year=2003}.&lt;/pre&gt;


&amp;nbsp;
&lt;h3&gt;Further Reading&lt;/h3&gt;

&lt;a href=&quot;http://www.erlang.org/doc/reference_manual/records.html&quot;&gt;Reference Manual&lt;/a&gt;
&lt;a href=&quot;http://www.erlang.org/doc/programming_examples/records.html&quot;&gt;Examples&lt;/a&gt;

&amp;nbsp;
&amp;nbsp;
</content>
 </entry>
 
 
</feed>